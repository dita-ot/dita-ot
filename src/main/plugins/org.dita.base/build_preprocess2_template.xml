<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of the DITA Open Toolkit project.

Copyright 2016 Jarno Elovirta

See the accompanying LICENSE file for applicable license.
-->
<project xmlns:dita="http://dita-ot.sourceforge.net"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
         name="ditaot-preprocess2">

  <target name="preprocess2"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Preprocess"
    dita:depends="{depend.preprocess.pre},
                  preprocess2.init,
                  ditaval-merge,
                  
                  map-reader,
                  map-mapref,
                  map-branch-filter,
                  map-keyref,
                  map-conrefpush,
                  map-conref,
                  map-profile,
    
                  topic-reader,
                  topic-branch-filter,
                  topic-keyref,
                  topic-copy-to,
                  topic-conrefpush,
                  topic-conref,
                  topic-profile,
                  topic-fragment,

                  topic-chunk,
                  topic-move-meta-entries,
                  topic-maplink,
                  topic-topicpull,
                  
                  clean-preprocess,
                  copy-files2,

                  {depend.preprocess.post}">
    <!-- Deprecated since 2.4 -->
    <property name="user.input.file.listfile" value="usr.input.file.list"/>
  </target>

  <!--target name="topic-preprocess"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          description="Preprocess topic"
          dita:depends="{depend.preprocess.pre},
                  preprocess2.init,

                  topic-reader,
                  topic-conrefpush,
                  topic-conref,
                  topic-profile,
                  topic-fragment,

                  topic-move-meta-entries,
                  topic-topicpull,

                  clean-preprocess,
                  copy-files,

                  {depend.preprocess.post}">
    <!- - Deprecated since 2.4 - ->
    <property name="user.input.file.listfile" value="usr.input.file.list"/>
  </target-->
  
  <target name="preprocess2.init">
    <dita-ot-fail id="DOTA002F">
      <condition>
        <not><isset property="args.input"/></not>
      </condition>
    </dita-ot-fail>
    
    <echo level="info">*****************************************************************</echo>
    <echo level="info">* input = ${args.input}</echo>
    <echo level="info">*****************************************************************</echo>
    
    <echoxml file="${dita.temp.dir}/.job.xml">
      <job>
        <property name="temp-file-name-scheme">
          <string>org.dita.dost.module.GenMapAndTopicListModule$HashTempFileScheme</string>
        </property>
      </job>
    </echoxml>
    <property name="map.filter-on-parse" value="false"/>
    <property name="topic.filter-on-parse" value="true"/>
    <condition property="preprocess.map-profile.skip">
      <istrue value="${map.filter-on-parse}"/>
    </condition>
  </target>
  
  <target name="map-reader"
    description="Generate lists, debug, and filter input map files">
    <pipeline message="Generate list." taskname="map-reader"
              inputmap="${args.input}">
      <module class="org.dita.dost.module.reader.MapReaderModule">
        <param name="inputdir" location="${args.input.dir}" if:set="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <!--<param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>-->
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="outputdir" location="${dita.output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${map.filter-on-parse}" unless:set="map.filter-on-parse"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if:set="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
      </module>
    </pipeline>
    <!-- TODO replace with direct resource collection availability test -->
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <property name="fullditamapfile" value="fullditamap.list"/>
    <condition property="noMap">
      <length file="${dita.temp.dir}/${fullditamapfile}" length="0"/>
    </condition>
    <delete file="${dita.temp.dir}/${fullditamapfile}"/>
  </target>

  <target name="map-mapref"
          dita:depends="{depend.preprocess.mapref.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.mapref.skip"
          description="Resolve mapref in ditamap">
    <condition property="dita.preprocess.reloadstylesheet.mapref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mapref"/></not>
    </condition>
    <dirname property="mapref.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"
        filenameparameter="file-being-processed">
        <!-- TODO only merge start map -->
        <ditafileset format="ditamap"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="map-branch-filter"
    unless="preprocess.branch-filter.skip"
    description="Resolve input map files branch filtering">
    <pipeline taskname="branch-filter" message="Filter branches">
      <module class="org.dita.dost.module.filter.MapBranchFilterModule"/>
    </pipeline>
  </target>
  
  <target name="map-keyref"
    unless="preprocess.keyref.skip"
    description="Resolve input map files keyref">
    <pipeline message="Resolve keyref." taskname="keyref">
      <module class="org.dita.dost.module.KeyrefModule">
        <ditaFileset format="ditamap"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"
        filenameparameter="file-being-processed">
        <!-- TODO only merge start map -->
        <ditaFileset format="ditamap"/>
        <!--param name="TRANSTYPE" expression="${transtype}" /-->
        <param name="child-topicref-warning" expression="false"/>
        <param name="keep-submap-href" expression="false"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="map-conrefpush"
    unless="preprocess.conrefpush.skip"
    description="Resolve input map files conref push">
    <pipeline message="Resolve conref push." taskname="conref-push">
      <module class="org.dita.dost.module.ConrefPushModule">
        <ditaFileset format="ditamap"/>
      </module>
    </pipeline>  
  </target>
  
  <target name="map-conref"
    unless="preprocess.conref.skip"
    description="Resolve conref in input map files">
    <condition property="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.conref"/></not>
    </condition>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl" filenameparameter="file-being-processed">
        <ditaFileset format="ditamap" conref="true"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="map-profile" depends="map-profile-check"
    unless="preprocess.map-profile.skip"
    description="Profile input map files">
    <pipeline message="Profile filtering." taskname="profile">
      <module class="org.dita.dost.module.FilterModule">
        <ditaFileset format="ditamap"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="map-profile-check">
    <condition property="preprocess.map-profile.skip">
      <istrue value="${map.filter-on-parse}"/>
    </condition>
  </target>
  
  <!-- ===================== -->
  <!--
  <target name="map"
    description="Generate lists, debug, and filter input map files">
    <condition property="dita.preprocess.reloadstylesheet.mapref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mapref"/></not>
    </condition>
    <dirname property="mapref.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <condition property="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.conref"/></not>
    </condition>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Generate list." taskname="map-reader"
      inputmap="${args.input}">
      <module class="org.dita.dost.module.reader.MapReaderModule">
        <param name="inputdir" location="${args.input.dir}" if:set="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="outputdir" location="${dita.output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${map.filter-on-parse}" unless="map.filter-on-parse"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if:set="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
      </module>
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"
        filenameparameter="file-being-processed"
        unless:set="preprocess.mapref.skip">
        <!- - TODO only merge start map - ->
        <ditafileset format="ditamap"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
      <module class="org.dita.dost.module.filter.MapBranchFilterModule"
        unless:set="preprocess.branch-filter.skip"/>
      <module class="org.dita.dost.module.KeyrefModule"
        unless:set="preprocess.keyref.skip">
        <ditaFileset format="ditamap"/>
        <param name="transtype" value="${transtype}"/>
      </module>
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"
        filenameparameter="file-being-processed"
        unless:set="preprocess.keyref.skip">
        <!- - TODO only merge start map - ->
        <ditaFileset format="ditamap"/>
        <param name="child-topicref-warning" expression="false"/>
        <param name="keep-submap-href" expression="false"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
      <module class="org.dita.dost.module.ConrefPushModule"
        unless:set="preprocess.conrefpush.skip">
        <ditaFileset format="ditamap"/>
      </module>
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl"
        filenameparameter="file-being-processed"
        unless:set="preprocess.conref.skip">
        <ditaFileset format="ditamap" conref="true"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
      <module class="org.dita.dost.module.FilterModule"
        unless:set="preprocess.map-profile.skip">
        <ditaFileset format="ditamap"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
    <!- - TODO replace with direct resource collection availability test - ->
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <property name="fullditamapfile" value="fullditamap.list"/>
    <condition property="noMap">
      <length file="${dita.temp.dir}/${fullditamapfile}" length="0"/>
    </condition>
    <delete file="${dita.temp.dir}/${fullditamapfile}"/>
  </target>
  -->
  <!-- ===================== -->
  
  <target name="topic-reader"
    dita:depends="{depend.preprocess.gen-list.pre},{depend.preprocess.debug-filter.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Generate file list">
    <pipeline message="Generate list." taskname="topic-reader">
      <!-- TODO Add if this reader starts processing -->
      <!-- inputmap="${args.input}" -->
      <module class="org.dita.dost.module.reader.TopicReaderModule">
        <param name="inputdir" location="${args.input.dir}" if:set="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <!--<param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>-->
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="onlytopicinmap" value="${onlytmopic.in.map}"/>
        <param name="outputdir" location="${dita.output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${topic.filter-on-parse}" unless:set="topic.filter-on-parse"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if:set="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        <!-- Not needed for topics -->
        <!--param name="force-unique" value="${force-unique}" if:set="force-unique"/-->
      </module>
    </pipeline>
  </target>

  <target name="topic-branch-filter">
    <pipeline taskname="branch-filter" message="Filter branches">
      <module class="org.dita.dost.module.filter.TopicBranchFilterModule"/>
    </pipeline>
  </target>

  <target name="topic-keyref"
          dita:depends="{depend.preprocess.keyref.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.keyref.skip"
          description="Resolve keyref">
    <pipeline message="Resolve keyref." taskname="keyref">
      <module class="org.dita.dost.module.KeyrefModule">
        <ditaFileset format="dita"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-copy-to">
    <pipeline message="Resolve copy-to." taskname="copy-to">
      <module class="org.dita.dost.module.CopyToModule">
        <param name="force-unique" value="${force-unique}" if:set="force-unique"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-conrefpush"
          dita:depends="{depend.preprocess.conrefpush.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.conrefpush.skip"
          description="Resolve conref push">
    <pipeline message="Resolve conref push." taskname="conref-push">
      <module class="org.dita.dost.module.ConrefPushModule">
        <ditaFileset format="dita"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-conref"
          dita:depends="{depend.preprocess.conref.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.conref.skip"
          description="Resolve conref in input files">
    <condition property="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.conref"/></not>
    </condition>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl" filenameparameter="file-being-processed">
        <ditaFileset conref="true" format="dita"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="topic-profile" depends="topic-profile-check"
          unless="preprocess.topic-profile.skip"
          description="Profile input files">
    <pipeline message="Profile filtering." taskname="profile">
      <module class="org.dita.dost.module.FilterModule">
        <ditaFileset format="dita"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-profile-check">
    <condition property="preprocess.topic-profile.skip">
      <istrue value="${topic.filter-on-parse}"/>
    </condition>
  </target>

  <target name="topic-fragment"
          dita:depends="{depend.preprocess.coderef.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          description="Normalize same topic fragment identifiers and table column names, and resolve coderef">
    <pipeline message="Resolve topic fragment." taskname="topic-fragment">
      <sax>
        <ditaFileset format="dita"/>
        <filter class="org.dita.dost.writer.TopicFragmentFilter">
          <param name="attributes" value="href"/>
        </filter>
        <filter class="org.dita.dost.writer.NormalizeTableFilter">
          <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        </filter>
        <filter class="org.dita.dost.writer.CoderefResolver" unless:set="preprocess.coderef.skip"/>
      </sax>
    </pipeline>
  </target>

  <target name="topic-chunk"
          dita:depends="{depend.preprocess.chunk.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.chunk.skip"
          description="Process chunks">
    <pipeline message="Process chunks." taskname="chunk">
      <module class="org.dita.dost.module.ChunkModule">
        <param name="transtype" value="${transtype}"/>
        <param name="root-chunk-override" value="${root-chunk-override}" if:set="root-chunk-override"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-move-meta-entries" 
    dita:depends="{depend.preprocess.move-meta-entries.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.move-meta-entries.skip"
    description="Move metadata entries">
    <pipeline message="Move metadata entries." taskname="move-meta">
      <module class="org.dita.dost.module.MoveMetaModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mappull.xsl"/>
        <param name="conserve-memory" expression="${conserve-memory}" if:set="conserve-memory"/>
        <dita:extension id="dita.preprocess.mappull.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-maplink"
    dita:depends="{depend.preprocess.maplink.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.maplink.skip"
    description="Find and generate related link information">
    <condition property="dita.preprocess.reloadstylesheet.maplink" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.maplink"/></not>
    </condition>
    <pipeline message="Move related links" taskname="maplink">
      <module class="org.dita.dost.module.MoveLinksModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/maplink.xsl"/>
        <param name="include.rellinks" expression="${include.rellinks}" if:set="include.rellinks"/>
        <!--dita:extension id="dita.preprocess.maplink.param" behavior="org.dita.dost.platform.InsertAction"/-->
      </module>
    </pipeline>
  </target>
  
  <target name="topic-topicpull"
    dita:depends="{depend.preprocess.topicpull.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.topicpull.skip"
    description="Pull metadata for link and xref element">
    <condition property="dita.preprocess.reloadstylesheet.topicpull" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.topicpull"/></not>
    </condition>
    <pipeline message="Pull metadata for link and xref element" taskname="topicpull">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.topicpull}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/topicpull.xsl">
        <ditaFileset format="dita"/>
        <param name="TABLELINK" expression="${args.tablelink.style}" if:set="args.tablelink.style" />
        <param name="FIGURELINK" expression="${args.figurelink.style}" if:set="args.figurelink.style" />
        <param name="ONLYTOPICINMAP" expression="${onlytopic.in.map}" if:set="onlytopic.in.map"/>
        <param name="defaultLanguage" expression="${default.language}"/>
        <dita:extension id="dita.preprocess.topicpull.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="map-clean-map" 
          unless="preprocess.clean-map-check.skip"
          description="Clean ditamap">
    <condition property="dita.preprocess.reloadstylesheet.clean-map" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.clean-map"/></not>
    </condition>
    <pipeline message="Clean ditamap" taskname="clean-map">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.clean-map}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/clean-map.xsl">
        <ditaFileset format="ditamap"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="copy-files2" description="Copy files to the output directory"
          dita:depends="{depend.preprocess.copy-files.pre},copy-image2,copy-html,copy-flag"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.copy-files.skip" />

  <target name="copy-image2"
          unless="preprocess.copy-image.skip"
          dita:depends="{depend.preprocess.copy-image.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          description="Copy image files">
    <copy todir="${dita.output.dir}" failonerror="false">
      <dita-fileset format="image" />
    </copy>
  </target>
  
</project>
