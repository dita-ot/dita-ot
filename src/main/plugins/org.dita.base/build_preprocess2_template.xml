<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is part of the DITA Open Toolkit project.

Copyright 2016 Jarno Elovirta

See the accompanying LICENSE file for applicable license.
-->
<project xmlns:dita="http://dita-ot.sourceforge.net"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
         name="ditaot-preprocess2">

  <target name="preprocess2"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    dita:depends="{depend.preprocess.pre},
                  preprocess2.init,
                  ditaval-merge,
                  
                  preprocess2.maps,
                  preprocess2.topics,
                  
                  map-clean-map,
                  clean-preprocess,
                  copy-files2,
                  preprocess2.post,
                  {depend.preprocess.post}"/>

  <target name="preprocess2.maps"
          depends="map-reader,
                  map-mapref,
                  map-reader-profile,
                  map-branch-filter,
                  map-keyref,
                  map-conrefpush,
                  map-conref,
                  map-profile"/>

  <target name="preprocess2.topics"
          description="Map-first preprocessing topic steps"
          depends="topic-reader,
                  topic-branch-filter,
                  topic-map-conref,
                  topic-keyref,
                  topic-copy-to,
                  topic-conrefpush,
                  topic-conref,
                  topic-profile,
                  preprocess2.topic-fragment,
                  topic-chunk,
                  topic-move-meta-entries,
                  topic-maplink,
                  topic-topicpull"/>

  <target name="preprocess2-topic"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          description="Map-first preprocess for topic input"
          dita:depends="{depend.preprocess.pre},
                  preprocess2.init,
                  ditaval-merge,

                  topic-reader,
                  topic-conrefpush,
                  topic-conref,
                  topic-profile,
                  preprocess2.topic-fragment,

                  topic-move-meta-entries,
                  topic-topicpull,

                  clean-preprocess,
                  copy-files2,
                  {depend.preprocess.post}"/>
  
  <target name="preprocess2.init"
          description="Initialize map-first preprocessing">
    <dita-ot-fail id="DOTA002F">
      <condition>
        <not><isset property="args.input"/></not>
      </condition>
    </dita-ot-fail>

    <property name="clean-preprocess.use-result-filename" value="true"/>

    <local name="input.isFile"/>
    <condition property="input.isFile" value="true">
      <available file="${args.input}" type="file"/>
    </condition>
    <sequential if:true="${input.isFile}">
      <basename property="dita.input.filename" file="${args.input}" />
      <pathconvert property="dita.map.filename.root">
        <path path="${dita.input.filename}"/>
        <chainedmapper>
          <mapper type="flatten"/>
          <mapper type="regexp" from="^(.+)(\..+?)$$" to="\1"/>
        </chainedmapper>
      </pathconvert>
    </sequential>
    <sequential unless:true="${input.isFile}">
      <taskdef name="uriBasenameTask" classname="org.dita.dost.ant.UriBasenameTask"/>
      <uriBasenameTask property="dita.input.filename" file="${args.input}" />
      <uriBasenameTask property="dita.map.filename.root" file="${args.input}" suffix=".*"/>
    </sequential>

    <property name="dita.topic.filename.root" value="${dita.map.filename.root}"/>    
    
    <echo level="info" if:true="${legacy-format}">*****************************************************************</echo>
    <echo level="info">${log-prefix}input = ${args.input}</echo>
    <echo level="info" if:set="args.resources">* resources = ${args.resources}</echo>
    <echo level="info" if:true="${legacy-format}">*****************************************************************</echo>

    <!-- TODO: change property initialization to not use physical files -->
    <mkdir dir="${dita.temp.dir}"/>
    <echoxml file="${dita.temp.dir}/.job.xml">
      <job>
        <property name="temp-file-name-scheme">
          <string>org.dita.dost.module.reader.HashTempFileScheme</string>
        </property>
      </job>
    </echoxml>
    <condition property="map.filter-on-parse" value="true" else="false">
      <equals arg1="${filter-stage}" arg2="early"/>
    </condition>
    <condition property="topic.filter-on-parse" value="true" else="false">
      <equals arg1="${filter-stage}" arg2="early"/>
    </condition>

    <preprocess-skip-init name="preprocess.map-profile" step="map-profile"/>
    <preprocess-skip-init name="preprocess.topic-profile" step="topic-profile"/>
    <preprocess-skip-init name="preprocess.branch-filter" step="branch-filter"/>
    <preprocess-skip-init name="preprocess.chunk" step="chunk"/>
    <preprocess-skip-init name="preprocess.clean-preprocess" step="clean-preprocess"/>
    <preprocess-skip-init name="preprocess.clean-map-check" step="clean-preprocess"/>
    <preprocess-skip-init name="preprocess.coderef" step="coderef"/>
    <preprocess-skip-init name="preprocess.conref" step="conref"/>
    <preprocess-skip-init name="preprocess.copy-flag" step="copy-flag"/>
    <preprocess-skip-init name="preprocess.copy-html" step="copy-html"/>
    <preprocess-skip-init name="preprocess.copy-image" step="copy-image"/>
    <preprocess-skip-init name="preprocess.keyref" step="keyref"/>
    <preprocess-skip-init name="preprocess.maplink" step="maplink"/>
    <preprocess-skip-init name="preprocess.mapref" step="mapref"/>
    <preprocess-skip-init name="preprocess.move-meta-entries" step="move-meta-entries"/>
    <preprocess-skip-init name="preprocess.normalize-codeblock" step="normalize-codeblock"/>
    <preprocess-skip-init name="preprocess.topicpull" step="topicpull"/>
  </target>
  
  <target name="map-reader"
    description="Read input map files to temporary store">
    <pipeline message="Generate maps" taskname="map-reader"
              inputmap="${args.input}">
      <module class="org.dita.dost.module.reader.MapReaderModule">
        <param name="resources" value="${args.resources}" if:set="args.resources"/>
        <param name="inputdir" location="${args.input.dir}" if:set="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="outputdir" location="${dita.output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if:set="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        <dita:extension id="dita.preprocess.map-reader.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
    <local name="inputMapPath"/>
    <pathconvert property="inputMapPath">
      <ditafileset format="ditamap" input="true"/>
    </pathconvert>
    <condition property="noMap">
      <equals arg1="${inputMapPath}" arg2=""/>
    </condition>
  </target>

  <target name="map-mapref"
          unless="preprocess.mapref.skip"
          description="Resolve mapref in ditamap">
    <property name="dita.preprocess.reloadstylesheet.mapref" value="${dita.preprocess.reloadstylesheet}"/>
    <dirname property="mapref.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <module class="org.dita.dost.module.MaprefModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"/>
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
  </target>

  <target name="map-branch-filter"
    unless="preprocess.branch-filter.skip"
    description="Resolve input map files branch filtering">
    <pipeline taskname="branch-filter" message="Filter branches">
      <module class="org.dita.dost.module.filter.MapBranchFilterModule"/>
    </pipeline>
  </target>
  
  <target name="map-keyref"
    unless="preprocess.keyref.skip"
    description="Resolve input map files keyref">
    <pipeline message="Resolve keyref." taskname="keyref">
      <module class="org.dita.dost.module.KeyrefModule" parallel="${parallel}">
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
      </module>
    </pipeline>
    <pipeline message="Resolve mapref in ditamap"
              taskname="mapref"
              unless:set="preprocess.mapref.skip">
      <module class="org.dita.dost.module.MaprefModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"/>
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
  </target>
  
  <target name="map-conrefpush"
    unless="preprocess.conref.skip"
    description="Resolve input map files conref push">
    <pipeline message="Resolve conref push." taskname="conref-push">
      <module class="org.dita.dost.module.ConrefPushModule">
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
      </module>
    </pipeline>  
  </target>
  
  <target name="map-conref"
    unless="preprocess.conref.skip"
    description="Resolve conref in input map files">
    <property name="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}"/>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/map-conref.xsl"
        filenameparameter="file-being-processed"
        parallel="${parallel}">
        <ditafileset format="ditamap" conref="true" input="true"/>
        <ditafileset format="ditamap" conref="true" inputResource="true"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
      </xslt>
    </pipeline>
  </target>

  <target name="map-reader-profile"
          unless="preprocess.map-profile.skip"
          description="Profile input map files">
    <pipeline message="Profile filtering." taskname="profile" if:true="${map.filter-on-parse}">
      <module class="org.dita.dost.module.ProfileModule">
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="map-profile"
    unless="preprocess.map-profile.skip"
    description="Profile input map files">
    <pipeline message="Profile filtering." taskname="profile" unless:true="${map.filter-on-parse}">
      <module class="org.dita.dost.module.ProfileModule">
        <ditafileset format="ditamap" input="true"/>
        <ditafileset format="ditamap" inputResource="true"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-reader"
    description="Read topic files to temporary store">
    <pipeline message="Generate topics" taskname="topic-reader"
              inputmap="${args.input}">
      <module class="org.dita.dost.module.reader.TopicReaderModule">
        <param name="resources" value="${args.resources}" if:set="args.resources"/>
        <param name="inputdir" location="${args.input.dir}" if:set="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="crawl" value="${link-crawl}" if:set="link-crawl"/>
        <param name="outputdir" location="${dita.output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${topic.filter-on-parse}" unless:set="topic.filter-on-parse"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if:set="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        <dita:extension id="dita.preprocess.topic-reader.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-branch-filter"
          unless="preprocess.branch-filter.skip"
          description="Topic branch filtering">
    <pipeline taskname="branch-filter" message="Filter branches">
      <module class="org.dita.dost.module.filter.TopicBranchFilterModule"/>
    </pipeline>
  </target>

  <target name="topic-keyref"
          unless="preprocess.keyref.skip"
          description="Resolve keyref">
    <pipeline message="Resolve keyref." taskname="keyref">
      <module class="org.dita.dost.module.KeyrefModule" parallel="${parallel}">
        <ditafileset format="dita"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-copy-to">
    <pipeline message="Resolve copy-to." taskname="copy-to">
      <module class="org.dita.dost.module.CopyToModule">
        <param name="force-unique" value="${force-unique}" if:set="force-unique"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-map-conref"
          unless="preprocess.conref.skip"
          description="Resolve conref in input map files">
    <property name="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}"/>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl"
            filenameparameter="file-being-processed"
            parallel="${parallel}">
        <ditafileset format="ditamap" conref="true" input="true"/>
        <ditafileset format="ditamap" conref="true" inputResource="true"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
      </xslt>
    </pipeline>
  </target>

  <target name="topic-conrefpush"
          unless="preprocess.conref.skip"
          description="Resolve conref push">
    <pipeline message="Resolve conref push." taskname="conref-push">
      <module class="org.dita.dost.module.ConrefPushModule">
        <ditafileset format="dita"/>
        <ditafileset format="ditamap"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-conref"
          unless="preprocess.conref.skip"
          description="Resolve conref in input files">
    <property name="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}"/>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl"
            filenameparameter="file-being-processed"
            parallel="${parallel}">
        <ditafileset conref="true" format="dita"/>
        <ditafileset conref="true" format="ditamap"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
      </xslt>
    </pipeline>
  </target>

  <target name="topic-profile"
          unless="preprocess.topic-profile.skip"
          description="Profile input files">
    <pipeline message="Profile filtering." taskname="profile" unless:true="${map.filter-on-parse}">
      <module class="org.dita.dost.module.FilterModule">
        <ditafileset format="dita"/>
        <param name="ditaval" location="${dita.input.valfile}" if:set="dita.input.valfile"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>

  <target name="preprocess2.topic-fragment"
          description="Normalize same topic fragment identifiers and table column names, and resolve coderef">
    <pipeline message="Resolve topic fragment." taskname="preprocess2.topic-fragment">
      <sax parallel="${parallel}">
        <ditafileset format="dita"/>
        <filter class="org.dita.dost.writer.TopicFragmentFilter">
          <param name="attributes" value="href"/>
        </filter>
        <filter class="org.dita.dost.writer.NormalizeTableFilter">
          <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        </filter>
        <filter class="org.dita.dost.writer.NormalizeSimpleTableFilter"/>
        <filter class="org.dita.dost.writer.CoderefResolver" unless:set="preprocess.coderef.skip">
          <param name="processing-mode" value="${processing-mode}" if:set="processing-mode"/>
        </filter>
        <filter class="org.dita.dost.writer.NormalizeCodeblock" unless:set="preprocess.normalize-codeblock.skip"/>
      </sax>
    </pipeline>
  </target>

  <target name="topic-chunk"
          unless="preprocess.chunk.skip"
          description="Process chunks">
    <pipeline message="Process chunks." taskname="chunk">
      <module class="org.dita.dost.module.ChunkModule">
        <param name="transtype" value="${transtype}"/>
        <param name="root-chunk-override" value="${root-chunk-override}" if:set="root-chunk-override"/>
      </module>
    </pipeline>
    <pipeline message="Process DITA 2 chunks." taskname="chunk2">
      <module class="org.dita.dost.chunk.ChunkModule">
        <param name="root-chunk-override" value="${root-chunk-override}" if:set="root-chunk-override"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-move-meta-entries"
    unless="preprocess.move-meta-entries.skip"
    description="Move metadata entries">
    <pipeline message="Move metadata entries." taskname="move-meta">
      <module class="org.dita.dost.module.MoveMetaModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mappull.xsl"/>
        <param name="conserve-memory" expression="${conserve-memory}" if:set="conserve-memory"/>
        <dita:extension id="dita.preprocess.mappull.param" behavior="org.dita.dost.platform.InsertAction"/>
      </module>
    </pipeline>
  </target>

  <target name="topic-maplink"
    unless="preprocess.maplink.skip"
    description="Find and generate related link information">
    <property name="dita.preprocess.reloadstylesheet.maplink" value="${dita.preprocess.reloadstylesheet}"/>
    <pipeline message="Move related links" taskname="maplink">
      <module class="org.dita.dost.module.MoveLinksModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/maplink.xsl"/>
        <param name="include.rellinks" expression="${include.rellinks}" if:set="include.rellinks"/>
      </module>
    </pipeline>
  </target>
  
  <target name="topic-topicpull"
    unless="preprocess.topicpull.skip"
    description="Pull metadata for link and xref element">
    <property name="dita.preprocess.reloadstylesheet.topicpull" value="${dita.preprocess.reloadstylesheet}"/>
    <pipeline message="Pull metadata for link and xref element" taskname="topicpull">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.topicpull}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/topicpull.xsl"
        parallel="${parallel}">
        <ditafileset format="dita" processingRole="normal"/>
        <param name="TABLELINK" expression="${args.tablelink.style}" if:set="args.tablelink.style" />
        <param name="FIGURELINK" expression="${args.figurelink.style}" if:set="args.figurelink.style" />
        <param name="ONLYTOPICINMAP" expression="${onlytopic.in.map}" if:set="onlytopic.in.map"/>
        <param name="defaultLanguage" expression="${default.language}"/>
        <dita:extension id="dita.preprocess.topicpull.param" behavior="org.dita.dost.platform.InsertAction"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="map-clean-map" 
          unless="preprocess.clean-map-check.skip"
          description="Clean ditamap">
    <property name="dita.preprocess.reloadstylesheet.clean-map" value="${dita.preprocess.reloadstylesheet}"/>
    <pipeline message="Clean ditamap" taskname="clean-map">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.clean-map}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/clean-map.xsl">
        <ditafileset format="ditamap"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <!-- XXX: should this be inlined to make the target tree flatter? -->
  <target name="copy-files2"
          description="Copy files to the output directory"
          depends="copy-image2,
                   copy-html2,
                   copy-flag"/>

  <target name="copy-image2"
          unless="preprocess.copy-image.skip"
          description="Copy image files">
    <copy todir="${dita.output.dir}" failonerror="false" overwrite="true">
      <ditafileset format="image" />
      <jobmapper/>
    </copy>
  </target>
  
  <target name="copy-html2" 
          unless="preprocess.copy-html.skip" 
          description="Copy html files">
    <copy todir="${dita.output.dir}" failonerror="false" overwrite="true">
      <ditafileset>
        <excludes format="dita"/>
        <excludes format="ditamap"/>
        <excludes format="ditaval"/>
        <excludes format="image"/>
        <excludes format="coderef"/>
      </ditafileset>
      <jobmapper/>
    </copy>
  </target>  

  <target name="preprocess2.post"
          description="Preprocess post">
    <dirname property="_dita.map.output.dir" file="${dita.output.dir}/${user.input.file}" />
    <dirname property="_dita.map.temp.dir" file="${dita.temp.dir}/${user.input.file}" />
    <property name="dita.map.output.dir" location="${_dita.map.output.dir}/${uplevels}"/>
  </target>
</project>
