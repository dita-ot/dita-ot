<?xml version="1.0"?>
<!-- This file is part of the DITA Open Toolkit project.
     See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2006 All Rights Reserved. -->
<project xmlns:dita="http://dita-ot.sourceforge.net" name="ditaot-preprocess">

  <!-- Set to "true" if you get out-of-memory errors during preprocess
       while processing very large (thousands of files) document sets. -->
  <condition property="dita.preprocess.reloadstylesheet" value="${conserve-memory}">
    <and>
      <not><isset property="dita.preprocess.reloadstylesheet"/></not>
      <isset property="conserve-memory"/>
    </and>
  </condition>

  <target name="preprocess"
    dita:depends="{depend.preprocess.pre},
                  preprocess.init,
                  gen-list,
                  debug-filter,
                  copy-files,
                  keyref,
                  conrefpush,
                  conref,
                  profile,
                  topic-fragment,
                  coderef,
                  mapref,
                  move-meta-entries,
                  mappull,
                  chunk,
                  maplink,
                  topicpull,
                  flag-module,
                  clean-map,
                  {depend.preprocess.post}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Preprocessing ended" />
  
  <target name="preprocess.init">
    <dita-ot-fail id="DOTA069F">
      <condition>
        <and>
          <isset property="args.input"/>
          <not>
            <isset property="args.input.dir"/>
          </not>
          <not>
            <available file="${args.input}" type="file"/>
          </not>
        </and>
      </condition>
      <param name="1" location="${args.input}"/>
    </dita-ot-fail>
    <dita-ot-fail id="DOTA069F">
      <condition>
        <and>
          <isset property="args.input"/>
          <isset property="args.input.dir"/>
          <not>
            <or>
              <available file="${args.input}" type="file"/>
              <available file="${args.input.dir}/${args.input}" type="file"/>
            </or>
          </not>
        </and>
      </condition>
      <param name="1" location="${args.input}"/>
    </dita-ot-fail>
    <dita-ot-fail id="DOTA002F">
      <condition>
        <and>
          <not>
            <isset property="args.input"/>
          </not>
          <not>
            <isset property="args.input.uri"/>
          </not>
        </and>
      </condition>
    </dita-ot-fail>
    
    <basename property="dita.input.filename" file="${args.input}" />
    <basename property="dita.map.filename.root" file="${dita.input.filename}" suffix=".ditamap" />
    <basename property="dita.topic.filename.root" file="${dita.input.filename}" suffix=".dita" />
    
    <echo level="info">*****************************************************************</echo>
    <echo level="info">* input = ${args.input}</echo>
    <echo level="info">*****************************************************************</echo>
  </target>
  
  <!-- clean-temp
      Remove anything in the ${dita.temp.dir} directory before starting. -->
  <target name="clean-temp" unless="clean-temp.skip"
    dita:depends="{depend.preprocess.clean-temp.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Clean temp directory">
    <delete includeemptydirs="true" failonerror="no">
      <fileset dir="${dita.temp.dir}"/>
    </delete>
  </target>

  <!-- gen-list
      Create the manifest files listing which files are referenced by the input file (even indirectly). -->
  <target name="gen-list"
    dita:depends="{depend.preprocess.gen-list.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.gen-list.skip"
    description="Generate file list">
    <pipeline message="Generate list." taskname="gen-list"
      inputmap="${args.input}"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.GenMapAndTopicListModule">
        <param name="inputdir" location="${args.input.dir}" if="args.input.dir"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="validate" value="${validate}"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="outputdir" location="${output.dir}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${filter-on-parse}" unless="filter-on-parse"/>
      </module>
    </pipeline>
    <!-- generate list files -->
    <job-helper file="outditafiles.list" property="outditafileslist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="hrefditatopic.list" property="hrefditatopiclist"/>
    <job-helper file="conref.list" property="conreflist"/>
    <job-helper file="image.list" property="imagelist"/>
    <job-helper file="flagimage.list" property="flagimagelist"/>
    <job-helper file="html.list" property="htmllist"/>
    <job-helper file="hreftargets.list" property="hreftargetslist"/>
    <job-helper file="canditopics.list" property="canditopicslist"/>
    <job-helper file="subjectscheme.list" property="subjectschemelist"/>
    <job-helper file="conreftargets.list" property="conreftargetslist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="subtargets.list" property="subtargetslist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <property name="outditafilesfile" value="outditafiles.list"/>
    <property name="fullditamapandtopicfile" value="fullditamapandtopic.list"/>
    <property name="fullditatopicfile" value="fullditatopic.list"/>
    <property name="fullditamapfile" value="fullditamap.list"/>
    <property name="hrefditatopicfile" value="hrefditatopic.list"/>
    <property name="conreffile" value="conref.list"/>
    <property name="imagefile" value="image.list"/>
    <property name="flagimagefile" value="flagimage.list"/>
    <property name="htmlfile" value="html.list"/>
    <property name="hreftargetsfile" value="hreftargets.list"/>
    <property name="canditopicsfile" value="canditopics.list"/>
    <property name="subjectschemefile" value="subjectscheme.list"/>
    <property name="conreftargetsfile" value="conreftargets.list"/>
    <property name="copytosourcefile" value="copytosource.list"/>
    <property name="subtargetsfile" value="subtargets.list"/>
    <property name="resourceonlyfile" value="resourceonly.list"/>
  </target>

  <!-- debug-filter
      Copy input files to ${dita.temp.dir} tree.
      While copying, populate default attributes like @class,
      add @xtrf and @xtrc and filter out elements according to valfile, if any. -->
  <target name="debug-filter"
    dita:depends="{depend.preprocess.debug-filter.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.debug-filter.skip"
    description="Debug and filter input files" >
    <pipeline message="Debug and filtering." taskname="filter"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.DebugAndFilterModule">
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="validate" value="${validate}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="profiling.enable" value="${filter-on-parse}" unless="filter-on-parse"/>
        <param name="force-unique" value="${force-unique}" if="force-unique"/>
        <param name="generate-debug-attributes" value="${generate-debug-attributes}" if="generate-debug-attributes"/>
        <param name="processing-mode" value="${processing-mode}" if="processing-mode"/>
      </module>
    </pipeline>
    <job-helper file="user.input.file.list" property="user.input.file"/>
    <job-helper file="hreftargets.list" property="hreftargetslist"/>
    <job-helper file="conref.list" property="conreflist"/>
    <job-helper file="hrefditatopic.list" property="hrefditatopiclist"/>
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="conreftargets.list" property="conreftargetslist"/>
    <job-helper file="canditopics.list" property="canditopicslist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-property dir="${dita.temp.dir}"/>
    <dirname property="_dita.map.output.dir" file="${output.dir}/${user.input.file}" />
    <property name="dita.map.output.dir" location="${_dita.map.output.dir}/${uplevels}"/>
    <condition property="noMap">
      <length file="${dita.temp.dir}/${fullditamapfile}" length="0"/>
    </condition>
    <condition property="noImagelist">
      <length file="${dita.temp.dir}/${imagefile}" length="0"/>
    </condition>
  </target>

  <!-- profile -->
  <target name="profile" depends="profile-check"
          unless="preprocess.profile.skip"
          description="Profile input files">
    <pipeline message="Profile filtering." taskname="profile"
              inputmap="${args.input}"
              tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.FilterModule">
        <!--param name="ditadir" location="${dita.dir}"/-->
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <!--param name="inputdir" location="${args.input.dir}" if="args.input.dir"/-->
        <!--param name="outputdir" location="${output.dir}"/-->
        <!--param name="setsystemid" value="${args.xml.systemid.set}"/-->
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
    <!-- update list files -->
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="copytotarget2sourcemap.list" property="copytotarget2sourcemaplist"/>
    <job-property dir="${dita.temp.dir}"/>
    <condition property="noTopic">
      <length file="${dita.temp.dir}/${fullditatopicfile}" length="0"/>
    </condition>
  </target>

  <target name="profile-check">
    <condition property="preprocess.profile.skip">
      <!--not>
        <isset property="dita.input.valfile"/>
      </not-->
      <istrue value="${filter-on-parse}"/>
    </condition>
  </target>
  
  <!-- conref push
      Push information to the specified target -->
  <target name="conrefpush"
    dita:depends="{depend.preprocess.conrefpush.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.conrefpush.skip"
    description="Resolve conref push">
    <pipeline message="Resolve conref push." taskname="conref-push"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.ConrefPushModule"/>
    </pipeline>
    <job-helper file="conref.list" property="conreflist"/>
  </target>
  
  <!-- move-meta-entries
      Push information from <topicmeta> in the map into the corresponding topics. -->
  <target name="move-meta-entries" 
    dita:depends="{depend.preprocess.move-meta-entries.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.move-meta-entries.skip"
    description="Move metadata entries">
    <pipeline message="Move metadata entries." taskname="move-meta"
      inputmap="${user.input.file}"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.MoveMetaModule"/>
    </pipeline>
  </target>
  
  <!-- conref
      Pull elements referenced by conref into their correct place. -->
  <target name="conref" 
    dita:depends="{depend.preprocess.conref.pre},conref-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.conref.skip"
    description="Resolve conref in input files">
    <condition property="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.conref"/></not>
    </condition>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl" filenameparameter="file-being-processed">
        <includesfile name="${dita.temp.dir}/${conreffile}"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="conref-check">
    <condition property="preprocess.conref.skip">
      <length file="${dita.temp.dir}/${conreffile}" length="0"/>
    </condition>
  </target>
  
  <target name="topic-fragment"
          description="Resolve same topic fragment identifiers">
    <pipeline message="Resolve topic fragment." taskname="topic-fragment">
      <module class="org.dita.dost.module.TopicFragmentModule"/>
    </pipeline>
  </target>
  
  <!-- coderef -->
  <target name="coderef"
    dita:depends="{depend.preprocess.coderef.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.coderef.skip"
    description="Resolve coderef in input files">
    
    <pipeline message="Resolve coderef." taskname="coderef"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.CoderefModule"/>
    </pipeline>
    
  </target>
  
  <!-- mapref
      Produce a logical super-map from the map references
      (topicref with format="ditamap") in the input map. -->
  <target name="mapref" 
    dita:depends="{depend.preprocess.mapref.pre},mapref-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.mapref.skip"
    description="Resolve mapref in ditamap">
    <condition property="dita.preprocess.reloadstylesheet.mapref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mapref"/></not>
    </condition>
    <dirname property="mapref.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <xslt basedir="${dita.temp.dir}"
          reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl" filenameparameter="file-being-processed">
        <includesfile name="${dita.temp.dir}/${fullditamapfile}"/>
        <param name="TRANSTYPE" expression="${transtype}" />
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="mapref-check">
    <condition property="preprocess.mapref.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- keyref
       Resolve keyref using key definition in ditamap-->
  <target name="keyref"
    dita:depends="{depend.preprocess.keyref.pre}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.keyref.skip"
    description="Resolve keyref">
    <pipeline message="Resolve keyref." taskname="keyref"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.KeyrefModule">
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
  </target>
  
  <!-- mappull
      Pull metadata (such as navtitle) into the map from the referenced topics. -->
  <target name="mappull"
    dita:depends="{depend.preprocess.mappull.pre},mappull-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.mappull.skip"
    description="Pull the navtitle and topicmeta from topics to ditamap">
    <dirname property="mappull.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <condition property="dita.preprocess.reloadstylesheet.mappull" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mappull"/></not>
    </condition>
    <pipeline message="Pull the navtitle and topicmeta from topics to ditamap" taskname="mappull">
      <xslt basedir="${dita.temp.dir}"
          reloadstylesheet="${dita.preprocess.reloadstylesheet.mappull}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mappull.xsl">
        <includesfile name="${dita.temp.dir}/${fullditamapfile}"/>
        <param name="TRANSTYPE" expression="${transtype}" />
        <param name="conserve-memory" expression="${conserve-memory}" if="conserve-memory"/>
        <dita:extension id="dita.preprocess.mappull.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="mappull-check">
    <condition property="preprocess.mappull.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- chunk
      Assemble virtual supertopics based on chunk attribute in map. -->
  <target name="chunk" 
    dita:depends="{depend.preprocess.chunk.pre},chunk-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.chunk.skip"
    description="Process chunks">
    <pipeline message="Process chunks." taskname="chunk"
      inputmap="${user.input.file}"
      tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.ChunkModule">
        <param name="transtype" value="${transtype}"/>
        <param name="root-chunk-override" value="${root-chunk-override}" if="root-chunk-override"/>
      </module>
    </pipeline>
    
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="copytotarget2sourcemap.list" property="copytotarget2sourcemaplist"/>
    <job-property dir="${dita.temp.dir}"/>
    <condition property="noTopic">
        <length file="${dita.temp.dir}/${fullditatopicfile}" length="0"/>
    </condition>
  </target>

  <target name="chunk-check">
    <condition property="preprocess.chunk.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- maplink
    Collect all links from maps and push them into topics. -->
  <target name="maplink"
    dita:depends="{depend.preprocess.maplink.pre},maplink-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.maplink.skip"
    description="Find and generate related link information">
    <condition property="dita.preprocess.reloadstylesheet.maplink" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.maplink"/></not>
    </condition>
    <pipeline message="Move related links" taskname="maplink"
              inputmap="${user.input.file}" tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.MoveLinksModule">
        <param name="style" location="${dita.plugin.org.dita.base.dir}/xsl/preprocess/maplink.xsl"/>
        <param name="include.rellinks" expression="${include.rellinks}" if="include.rellinks"/>
        <!--dita:extension id="dita.preprocess.maplink.param" behavior="org.dita.dost.platform.InsertAction"/-->
      </module>
    </pipeline>
  </target>

  <target name="maplink-check">
    <condition property="preprocess.maplink.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- topicpull
      Populate link text for links within topics (xref, link). -->
  <target name="topicpull"
    dita:depends="{depend.preprocess.topicpull.pre},topicpull-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.topicpull.skip"
    description="Pull metadata for link and xref element">
    <condition property="dita.preprocess.reloadstylesheet.topicpull" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.topicpull"/></not>
    </condition>
    <pipeline message="Pull metadata for link and xref element" taskname="topicpull">
      <xslt basedir="${dita.temp.dir}"
        reloadstylesheet="${dita.preprocess.reloadstylesheet.topicpull}"
        style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/topicpull.xsl">
        <includesfile name="${dita.temp.dir}/${fullditatopicfile}"/>
        <param name="TABLELINK" expression="${args.tablelink.style}" if="args.tablelink.style" />
        <param name="FIGURELINK" expression="${args.figurelink.style}" if="args.figurelink.style" />
        <param name="ONLYTOPICINMAP" expression="${onlytopic.in.map}" if="onlytopic.in.map"/>
        <dita:extension id="dita.preprocess.topicpull.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="topicpull-check">
    <condition property="preprocess.topicpull.skip">
      <isset property="noTopic"/>
    </condition>
  </target>

  <target name="flag-module" 
      dita:depends="{depend.preprocess.flag-module.pre},flag-module-check"
      dita:extension="depends org.dita.dost.platform.InsertDependsAction"
      description="Add flagging information to topics" 
      unless="preprocess.flagging.skip">
    <makeurl file="${args.filter}" property="dita.input.filterfile.url" validate="no"></makeurl>
    <condition property="dita.preprocess.reloadstylesheet.flag-module" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.flag-module"></isset></not>
    </condition>
    <pipeline message="Add flagging information to topics" taskname="preprocess_flag">
      <xslt basedir="${dita.temp.dir}" 
          reloadstylesheet="${dita.preprocess.reloadstylesheet.flag-module}" 
          style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/flag.xsl"
          filenameparameter="FILENAME" 
          filedirparameter="FILEDIR">
        <includesfile name="${dita.temp.dir}/${fullditatopicfile}"/>
        <excludesfile name="${dita.temp.dir}${file.separator}${resourceonlyfile}" if="resourceonlyfile"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <param name="FILTERFILEURL" expression="${dita.input.filterfile.url}"/>
        <param name="DRAFT" expression="${args.draft}" if="args.draft"/>
        <param name="BASEDIR" expression="${basedir}"/>
        <param name="OUTPUTDIR" expression="${output.dir}"/>
        <param name="DBG" expression="${args.debug}" if="args.debug"/>
        <dita:extension id="dita.preprocess.flag-module.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>

  <target name="flag-module-check">
      <condition property="preprocess.flagging.skip">
          <or>
              <isset property="noTopic"/>
              <not>
                  <isset property="args.filter"></isset>
              </not>
          </or>
      </condition>
  </target>
  
  <!-- Clean maps from processing time  -->
  <target name="clean-map" 
          depends="clean-map-check"
          unless="preprocess.clean-map-check.skip"
          description="Clean ditamap">
    <condition property="dita.preprocess.reloadstylesheet.clean-map" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.clean-map"/></not>
    </condition>
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.clean-map}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/clean-map.xsl">
        <includesfile name="${dita.temp.dir}/${fullditamapfile}"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="clean-map-check">
    <condition property="preprocess.clean-map-check.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- copy-files
      Copy files to the output directory. -->
  <target name="copy-files"
    dita:depends="{depend.preprocess.copy-files.pre},copy-image,copy-html,copy-flag,copy-subsidiary"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.copy-files.skip" />
     
  <target name="copy-image"
    unless="preprocess.copy-image.skip"
    dita:depends="{depend.preprocess.copy-image.pre},copy-image-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction" 
    description="Copy image files">
    <condition property="copy-image.todir" value="${output.dir}/${uplevels}" else="${output.dir}">
      <equals arg1="${generate.copy.outer}" arg2="1"/>      
    </condition>
    <copy todir="${copy-image.todir}">
      <fileset dir="${user.input.dir}" includesfile="${dita.temp.dir}/${imagefile}" />
    </copy>
  </target>
  
  <target name="copy-image-check">
    <condition property="preprocess.copy-image.skip">
      <or>
        <isset property="preprocess.copy-files.skip"/>
        <isset property="noImagelist"/>
      </or>
    </condition>
  </target>

  <target name="copy-html"
    dita:depends="{depend.preprocess.copy-html.pre},copy-html-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.copy-html.skip"
    description="Copy html files">
    <copy todir="${output.dir}">
      <fileset dir="${user.input.dir}" includesfile="${dita.temp.dir}/${htmlfile}"/>
    </copy>
  </target>

  <target name="copy-html-check">
    <condition property="preprocess.copy-html.skip">
      <or>
        <isset property="preprocess.copy-files.skip"/>
        <length file="${dita.temp.dir}/${htmlfile}" length="0"/>
      </or>
    </condition>
  </target>
  
  <target name="copy-flag"
    dita:depends="{depend.preprocess.copy-flag.pre},copy-flag-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.copy-flag.skip"
    description="Copy flag files">
    <dita-ot-copy todir="${output.dir}" includesfile="${dita.temp.dir}/${flagimagefile}" relativepaths="${relflagimagelist}" />
  </target>
  
  <target name="copy-flag-check">
    <condition property="preprocess.copy-flag.skip">
      <or>
        <isset property="preprocess.copy-files.skip"/>
        <not><isset property="dita.input.valfile"/></not>
      </or>
    </condition>
  </target>
  
  <target name="copy-subsidiary"
    dita:depends="{depend.preprocess.copy-subsidiary.pre},copy-subsidiary-check"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    unless="preprocess.copy-subsidiary.skip"
    description="Copy subsidiary files">
    <copy todir="${dita.temp.dir}">
      <fileset dir="${user.input.dir}" includesfile="${dita.temp.dir}/${subtargetsfile}"/>
    </copy>
  </target>


  <target name="copy-subsidiary-check">
    <condition property="preprocess.copy-subsidiary.skip">
      <or>
        <isset property="preprocess.copy-files.skip"/>
        <length file="${dita.temp.dir}/${subtargetsfile}" length="0"/>
      </or>
    </condition>
  </target>
  
</project>
