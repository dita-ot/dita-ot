<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the DITA Open Toolkit project.
     See the accompanying license.txt file for applicable licenses.
-->
<project xmlns:dita="http://dita-ot.sourceforge.net" name="ditaot-np">

  <target name="np.preprocess"
    dita:depends="{depend.preprocess.pre},
                  np.init,
                  np.gen-list-debug-filter,
                  keyref,
                  conrefpush,
                  np.conref,
                  np.profile,
                  move-meta-entries,
                  coderef,
                  np.mapref,
                  np.mappull,
                  chunk,
                  maplink,
                  move-links,
                  np.topicpull,
                  np.flag-module,
                  copy-files,
                  {depend.preprocess.post}"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    description="Preprocessing" />  

  <target name="np.init">
    <!-- Compatibility with preprocess -->
    <makeurl property="args.input.uri" file="${args.input}" validate="no"/>
    
    <dita-ot-fail id="DOTA002F">
      <condition>
        <and>
          <not>
            <isset property="args.input.uri"/>
          </not>
        </and>
      </condition>
    </dita-ot-fail>
    
    <taskdef name="uri-basename" classname="org.dita.dost.util.UriBasenameTask"/>
    <taskdef name="uri-dirname" classname="org.dita.dost.util.UriDirnameTask"/>
    
    <!-- start file name, e.g. main.ditamap -->
    <uri-basename property="dita.input.filename" file="${args.input.uri}"/>    
    <!-- start file name without extension, e.g. main -->
    <uri-basename property="dita.map.filename.root" file="${dita.input.filename}" suffix=".*"/>
    <uri-basename property="dita.topic.filename.root" file="${dita.input.filename}" suffix=".*"/>    
    
    <echo level="info">*****************************************************************</echo>
    <echo level="info">* input = ${args.input.uri}</echo>
    <echo level="info">*****************************************************************</echo>
  </target>
 
  <!-- gen-list-debug-filter
      Create the manifest files listing which files are referenced by the input file (even indirectly).
      Copy input files to ${dita.temp.dir} tree.
      While copying, populate default attributes like @class,
      add @xtrf and @xtrc and filter out elements according to valfile, if any. -->
  <target name="np.gen-list-debug-filter"
          dita:depends="{depend.preprocess.gen-list-debug-filter.pre}"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.gen-list-debug-filter.skip"
          description="Generate file list, debug and filter input files">
    <pipeline message="Generate list debug and filtering." taskname="gen-list-filter"
              inputmap="${args.input}"
              tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.GenMapAndTopicListDebugAndFilterModule">
        <param name="inputmap.uri" value="${args.input.uri}" if="args.input.uri"/>
        <param name="inputdir.uri" value="${args.input.dir.uri}" if="args.input.dir.uri"/>
        <param name="ditadir" location="${dita.dir}"/>
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="generatecopyouter" value="${generate.copy.outer}"/>
        <param name="gramcache" value="${args.grammar.cache}"/>
        <param name="inputdir" location="${args.input.dir}" if="args.input.dir"/>
        <param name="onlytopicinmap" value="${onlytopic.in.map}"/>
        <param name="outercontrol" value="${outer.control}"/>
        <param name="outputdir" location="${output.dir}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="transtype" value="${transtype}"/>
        <param name="validate" value="${validate}"/>
      </module>
    </pipeline>
    <!-- generate list files -->
    <job-helper file="canditopics.list" property="canditopicslist"/>
    <job-helper file="coderef.list" property="codereflist"/>
    <job-helper file="conref.list" property="conreflist"/>
    <job-helper file="conrefpush.list" property="conrefpushlist"/>
    <job-helper file="conreftargets.list" property="conreftargetslist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="flagimage.list" property="flagimagelist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="hrefditatopic.list" property="hrefditatopiclist"/>
    <job-helper file="hreftargets.list" property="hreftargetslist"/>
    <job-helper file="html.list" property="htmllist"/>
    <job-helper file="image.list" property="imagelist"/>
    <job-helper file="keyref.list" property="keyreflist"/>
    <job-helper file="outditafiles.list" property="outditafileslist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="subjectscheme.list" property="subjectschemelist"/>
    <job-helper file="subtargets.list" property="subtargetslist"/>
    <job-helper file="user.input.file.list" property="user.input.file"/>
    <property name="canditopicsfile" value="canditopics.list"/>
    <property name="codereffile" value="coderef.list"/>
    <property name="conreffile" value="conref.list"/>
    <property name="conrefpushfile" value="conrefpush.list"/>
    <property name="conreftargetsfile" value="conreftargets.list"/>
    <property name="copytosourcefile" value="copytosource.list"/>
    <property name="flagimagefile" value="flagimage.list"/>
    <property name="fullditamapandtopicfile" value="fullditamapandtopic.list"/>
    <property name="fullditamapfile" value="fullditamap.list"/>
    <property name="fullditatopicfile" value="fullditatopic.list"/>
    <property name="hrefditatopicfile" value="hrefditatopic.list"/>
    <property name="hreftargetsfile" value="hreftargets.list"/>
    <property name="htmlfile" value="html.list"/>
    <property name="imagefile" value="image.list"/>
    <property name="keyreffile" value="keyref.list"/>
    <property name="outditafilesfile" value="outditafiles.list"/>
    <property name="resourceonlyfile" value="resourceonly.list"/>
    <property name="subjectschemefile" value="subjectscheme.list"/>
    <property name="subtargetsfile" value="subtargets.list"/>
    <job-property dir="${dita.temp.dir}"/>
    <dirname property="dita.map.output.dir" file="${output.dir}/${user.input.file}" />
    <condition property="noMap">
      <length file="${dita.temp.dir}/${fullditamapfile}" length="0"/>
    </condition>
    <condition property="noImagelist">
      <length file="${dita.temp.dir}/${imagefile}" length="0"/>
    </condition>
  </target>
 
  <!-- profile -->
  <target name="np.profile" depends="np.profile-check"
          unless="preprocess.profile.skip"
          description="Profile input files">
    <pipeline message="Profile filtering." taskname="profile"
              inputmap="${args.input}"
              tempdir="${dita.temp.dir}">
      <module class="org.dita.dost.module.FilterModule">
        <param name="ditadir" location="${dita.dir}"/>
        <param name="ditaval" location="${dita.input.valfile}" if="dita.input.valfile"/>
        <param name="inputdir" location="${args.input.dir}" if="args.input.dir"/>
        <param name="outputdir" location="${output.dir}"/>
        <param name="setsystemid" value="${args.xml.systemid.set}"/>
        <param name="transtype" value="${transtype}"/>
      </module>
    </pipeline>
    <!-- update list files -->
    <job-helper file="fullditatopic.list" property="fullditatopiclist"/>
    <job-helper file="fullditamap.list" property="fullditamaplist"/>
    <job-helper file="fullditamapandtopic.list" property="fullditamapandtopiclist"/>
    <job-helper file="resourceonly.list" property="resourceonlylist"/>
    <job-helper file="copytosource.list" property="copytosourcelist"/>
    <job-helper file="copytotarget2sourcemap.list" property="copytotarget2sourcemaplist"/>
    <job-property dir="${dita.temp.dir}"/>
    <condition property="noTopic">
      <length file="${dita.temp.dir}/${fullditatopicfile}" length="0"/>
    </condition>
  </target>
  
  <target name="np.profile-check">
    <condition property="preprocess.profile.skip">
      <not>
        <isset property="dita.input.valfile"/>
      </not>
    </condition>
  </target>
  
  <!-- conref
      Pull elements referenced by conref into their correct place. -->
  <target name="np.conref" 
          dita:depends="{depend.preprocess.conref.pre}, np.conref-check"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.conref.skip"
          description="Resolve conref in input files">
    <condition property="dita.preprocess.reloadstylesheet.conref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.conref"/></not>
    </condition>
    <makeurl property="exportfile.url" file="${dita.temp.dir}/export.xml" validate="false"/>
    <pipeline message="Resolve conref in input files" taskname="conref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.conref}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/conref.xsl"
            filenameparameter="file-being-processed">
        <includesfile name="${dita.temp.dir}/${conreffile}"/>
        <param name="EXPORTFILE" expression="${exportfile.url}"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <dita:extension id="dita.preprocess.conref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="np.conref-check">
    <condition property="preprocess.conref.skip">
      <length file="${dita.temp.dir}/${conreffile}" length="0"/>      
    </condition>
  </target>
  
  <!-- mapref
      Produce a logical super-map from the map references
      (topicref with format="ditamap") in the input map. -->
  <target name="np.mapref" 
          dita:depends="{depend.preprocess.mapref.pre}, np.mapref-check"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.mapref.skip"
          description="Resolve mapref in ditamap">
    <condition property="dita.preprocess.reloadstylesheet.mapref" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mapref"/></not>
    </condition>
    <dirname property="mapref.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <pipeline message="Resolve mapref in ditamap" taskname="mapref">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.mapref}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mapref.xsl"
            filenameparameter="file-being-processed">
        <includesfile name="${dita.temp.dir}/${fullditamapfile}"/>
        <param name="TRANSTYPE" expression="${transtype}" />
        <dita:extension id="dita.preprocess.mapref.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="np.mapref-check">
    <condition property="preprocess.mapref.skip">
      <isset property="noMap"/>
    </condition>
  </target>
  
  <!-- mappull
      Pull metadata (such as navtitle) into the map from the referenced topics. -->
  <target name="np.mappull"
          dita:depends="{depend.preprocess.mappull.pre}, np.mappull-check"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.mappull.skip"
          description="Pull the navtitle and topicmeta from topics to ditamap">
    <dirname property="mappull.workdir" file="${dita.temp.dir}/${user.input.file}" />
    <condition property="dita.preprocess.reloadstylesheet.mappull" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.mappull"/></not>
    </condition>
    <pipeline message="Pull the navtitle and topicmeta from topics to ditamap" taskname="mappull">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.mappull}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/mappull.xsl">
        <includesfile name="${dita.temp.dir}/${fullditamapfile}"/>
        <param name="TRANSTYPE" expression="${transtype}" />
        <dita:extension id="dita.preprocess.mappull.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="np.mappull-check">
    <condition property="preprocess.mappull.skip">
      <isset property="noMap"/>
    </condition>
  </target>

  <!-- topicpull
      Populate link text for links within topics (xref, link). -->
  <target name="np.topicpull"
          dita:depends="{depend.preprocess.topicpull.pre}, np.topicpull-check"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          unless="preprocess.topicpull.skip"
          description="Pull metadata for link and xref element">
    <condition property="dita.preprocess.reloadstylesheet.topicpull" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.topicpull"/></not>
    </condition>
    <pipeline message="Pull metadata for link and xref element" taskname="topicpull">
      <xslt basedir="${dita.temp.dir}"
            reloadstylesheet="${dita.preprocess.reloadstylesheet.topicpull}"
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/topicpull.xsl">
        <includesfile name="${dita.temp.dir}/${fullditatopicfile}"/>
        <param name="TABLELINK" expression="${args.tablelink.style}" if="args.tablelink.style" />
        <param name="FIGURELINK" expression="${args.figurelink.style}" if="args.figurelink.style" />
        <param name="ONLYTOPICINMAP" expression="${onlytopic.in.map}" if="onlytopic.in.map"/>
        <dita:extension id="dita.preprocess.topicpull.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="np.topicpull-check">
    <condition property="preprocess.topicpull.skip">
      <isset property="noTopic"/>
    </condition>
  </target>

  <!-- flag module
      Add flagging information to topics. -->
  <target name="np.flag-module" 
          dita:depends="{depend.preprocess.flag-module.pre}, np.flag-module-check"
          dita:extension="depends org.dita.dost.platform.InsertDependsAction"
          description="Add flagging information to topics" 
          unless="preprocess.flagging.skip">
    <makeurl file="${args.filter}" property="dita.input.filterfile.url" validate="no"/>
    <condition property="dita.preprocess.reloadstylesheet.flag-module" value="${dita.preprocess.reloadstylesheet}">
      <not><isset property="dita.preprocess.reloadstylesheet.flag-module"/></not>
    </condition>
    <pipeline message="Add flagging information to topics" taskname="flag">
      <xslt basedir="${dita.temp.dir}" 
            reloadstylesheet="${dita.preprocess.reloadstylesheet.flag-module}" 
            style="${dita.plugin.org.dita.base.dir}/xsl/preprocess/flag.xsl"
            filenameparameter="FILENAME" 
            filedirparameter="FILEDIR">
        <includesfile name="${dita.temp.dir}/${fullditatopicfile}"/>
        <excludesfile name="${dita.temp.dir}/${resourceonlyfile}" if="resourceonlyfile"/>
        <param name="TRANSTYPE" expression="${transtype}"/>
        <param name="FILTERFILEURL" expression="${dita.input.filterfile.url}"/>
        <param name="DRAFT" expression="${args.draft}" if="args.draft"/>
        <param name="BASEDIR" expression="${basedir}"/>
        <param name="OUTPUTDIR" expression="${output.dir}"/>
        <param name="DBG" expression="${args.debug}" if="args.debug"/>
        <dita:extension id="dita.preprocess.flag-module.param" behavior="org.dita.dost.platform.InsertAction"/>
        <xmlcatalog refid="dita.catalog"/>
      </xslt>
    </pipeline>
  </target>
  
  <target name="np.flag-module-check">
    <condition property="preprocess.flagging.skip">
      <or>
        <isset property="noTopic"/>
        <not>
          <isset property="args.filter"/>
        </not>
      </or>
    </condition>
  </target>

</project>
