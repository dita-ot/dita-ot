<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="loghandling" xml:lang="en-us">
<title>Log files</title>
  <shortdesc>When you run the DITA-OT, key information is logged on the screen. This information can also be written to a log file. If you encounter a problem, you can analyze this information to
    determine the source of the problem and then take action to resolve it.</shortdesc>
<conbody>
    <p>The logging behavior varies depending on whether you use the <cmdname>dita</cmdname> command, DITA-OT command-line tool, or Ant
      to invoke a toolkit build.<dl>
        <dlentry>
          <dt><cmdname>dita</cmdname> command</dt>
          <dd>By default, only warning and error messages are written to the screen. If you use the
          <parmname>-v</parmname> option, logging will be more verbose and informative messages
          are also written out. The <parmname>-l</parmname> option can be used to write the log messages
          into a file.</dd>
        </dlentry>
        <dlentry>
          <dt>Ant</dt>
          <dd>By default, status information is written to the screen. If you issue the
              <parmname>-l</parmname> parameter, the build runs silently and the information is
            written to a log file with the name and location that you specified. (You also can use
            other Ant loggers; see the Ant documentation for more information.)</dd>
        </dlentry>
        <dlentry importance="deprecated">
          <dt>Command-line tool</dt>
          <dd>Status information is written to the screen and the log file. The log file name
            contains the input file name and transformation type; by default, it is located in the
            output directory. If you issue the <parmname>/logdir</parmname> parameter, you can
            specify a different location for where the log file is written.</dd>
        </dlentry>
      </dl></p>
    <!--<section><title>Analyze messages on the screen</title><p>During the building process, some information or messages occur on the screen to tell you about the status, warnings, errors, or fatal errors. You need to analyze the messages to solve the problems. <ul><li>If the build succeeded with some warning messages on the screen, it means that there are something incorrect within the user input parameters or source DITA files; but you can still get the correct output.</li><li>If the build succeeded with some error messages on the screen, it means that there are something incorrect within the user input parameters or source DITA files; the output maybe not correct.</li><li>If the build failed with fatal error message on the screen, it means that there are something illegal or invalid within the user input parameters or source DITA files; you may get no output, or wrong output.</li></ul> </p></section>-->
    <!--<section><title>Analyze messages in the log file</title><p>A log file in plain text format is generated in the log directory, which has a name combined with both input file name and transform type. You can open it and find more detailed information, which are helpful for solving problems. You can use the same way introduced above to analyze the messages and solve the problems.</p><p>The log directory can be specified by:</p><ul><li>using Ant, with argument <codeph>-logfile=<userinput>log-file</userinput></codeph></li><li>using command-line tool, the parameter <codeph>/logdir:<userinput>log-dir</userinput></codeph>.</li></ul></section>-->
    <!--<section><title>Turn on debug mode</title><p>Under debug mode, diagnostic information, such as: environment variables, stack trace, will be logged into the log file. These information can help the user or developer to go deep into the problems and find the root cause.</p><p>By default, the debug mode is disabled. To turn on the debug mode on, you need to follow the usage below: <ul><li>Append <codeph>-v</codeph> and <codeph>-Dargs.debug=yes</codeph> in Ant command.</li><li>Append <codeph>/d</codeph> or <codeph>/debug</codeph> in command-line tool.</li></ul></p></section>-->
</conbody>
</concept>
