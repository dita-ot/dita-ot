/*
 * This file is part of the DITA Open Toolkit project.
 *
 * Copyright 2015 Jarno Elovirta
 *
 * See the accompanying LICENSE file for applicable license.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'org.dita-ot'
archivesBaseName = 'dost'
version = '3.3.3'

description = """DITA Open Toolkit"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}
dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'xerces', name: 'xercesImpl', version:'2.12.0'
    compile group: 'xml-apis', name: 'xml-apis', version:'1.4.01'
    compile group: 'xml-resolver', name: 'xml-resolver', version:'1.2'
    compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.8.0-14'
    compile group: 'com.ibm.icu', name: 'icu4j', version:'61.1'
    compile group: 'org.apache.ant', name: 'ant', version:'1.10.5'
    compile group: 'org.apache.ant', name: 'ant-launcher', version:'1.10.5'
    compile(group: 'com.google.guava', name: 'guava', version: '25.1-jre') {
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'org.codehaus.mojo', module: 'animal-sniffer-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
        exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
    }
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compile group: 'org.relaxng', name: 'jing', version: '20181222'
    runtime group: 'org.apache.ant', name: 'ant-apache-resolver', version:'1.10.5'
    testCompile group: 'nu.validator.htmlparser', name: 'htmlparser', version:'1.4'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.6.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'
}

jar.archiveName = "${project.name}.jar"

processResources {
    filter ReplaceTokens, tokens: [
            'version': project.version,
            'release': "${project.version.split('\\.').toList().subList(0, 2).join('.').toString()}".toString()
    ]
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

test {
    exclude '**/IntegrationTest*.class'
    exclude '**/EndToEndTest*.class'
}

test.maxParallelForks = 4

// Integration test

def integrationTestSystemProperties = [
        temp_dir : "${buildDir}/tmp/integrationTest",
        dita_dir : "${projectDir}/src/main",
        basedir : "${projectDir}/src/test"
]
if (System.getProperty("test") != null) {
    integrationTestSystemProperties["test"] = System.getProperty("test")
}
if (System.getProperty("log_level") != null) {
    integrationTestSystemProperties["log_level"] = System.getProperty("log_level")
}

task integrationTest(type: Test, dependsOn: 'buildLocal') {
    minHeapSize = "128m"
    maxHeapSize = "1024m"
    systemProperties = integrationTestSystemProperties
    include '**/IntegrationTest*.class'
}

// End to end test

dependencies {
    testCompile project(':eclipsehelp')
    testCompile project(':htmlhelp')
    testCompile project(':fo')
    testCompile project(':fop')
}

def e2eTestSystemProperties = [
        temp_dir : "${buildDir}/tmp/e2eTest",
        dita_dir : "${projectDir}/src/main",
        basedir : "${projectDir}/src/test"
]
if (System.getProperty("log_level") != null) {
    integrationTestSystemProperties["log_level"] = System.getProperty("log_level")
}

task e2eTest(type: Test, dependsOn: 'buildLocal') {
    minHeapSize = "128m"
    maxHeapSize = "1024m"
    maxParallelForks = 4
    systemProperties = e2eTestSystemProperties
    include '**/EndToEndTest*.class'
}

// Install

defaultTasks 'buildLocal'

task copyInstall(type: Copy) {
    from (configurations.runtime.allArtifacts.files)
    from (configurations.runtime) {
        rename "ant-launcher(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant-launcher.jar"
        rename "ant(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant.jar"
    }
    destinationDir = file("src/main/lib")
}
task buildLocal(type: JavaExec, dependsOn: [copyInstall, ":fo:copyInstall", ":axf:copyInstall", ":fop:copyInstall", ":xep:copyInstall", ":eclipsehelp:copyInstall", ":htmlhelp:copyInstall", ":html5:compileSass"]) {
    description "Build archives and install all plugins with dependencies"
    main = "org.apache.tools.ant.launch.Launcher"
    classpath = sourceSets.main.runtimeClasspath + files("${projectDir}/src/main", "${projectDir}/src/main/config")
    workingDir file("${projectDir}/src/main")
    args "-f"
    args file("${projectDir}/src/main/integrator.xml")
}

// Distribution

ext.distTempDir = file("${buildDir}/tmp/dist")
def distVersion = project.hasProperty("commit") && (!project.hasProperty("tag") || tag.empty) ?
                  "${project.version}+${commit.substring(0, 7)}" :
                  "${project.version}"
def distFileName = (project.hasProperty("tag") && tag.empty) ?
                   "develop" :
                   "${project.version}"
def bundled = [
        "markdown": "https://github.com/jelovirt/org.lwdita/releases/download/2.3.0/org.lwdita-2.3.0.zip",
        "normalize": "https://github.com/dita-ot/org.dita.normalize/archive/1.0.zip",
        "troff": "https://github.com/dita-ot/org.dita.troff/archive/3.1.1.zip",
        "tocjs": "https://github.com/dita-ot/com.sophos.tocjs/archive/2.5.zip",
        "xdita": "https://github.com/oasis-tcs/dita-lwdita/releases/download/v0.2.2/org.oasis-open.xdita.v0_2_2.zip"
]

apply from: 'gradle/dist.gradle'

task cleanDistTemp(type: Delete) {
    delete distTempDir
}

task initDist(dependsOn: [jar, cleanDistTemp]) {
    doLast {
        distTempDir.mkdirs()
        println "distVersion: ${distVersion}"
        println "distFileName: ${distFileName}"
    }
}

task copyDistTemp(type: Copy, dependsOn: initDist) {
    from (configurations.runtime.allArtifacts.files) {
        into "lib"
    }
    from (configurations.runtime) {
        into "lib"
        rename "ant-launcher(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant-launcher.jar"
        rename "ant(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant.jar"
    }
    from (".") {
        include "LICENSE"
    }
    from ("src/main") {
        include "plugins/*/plugin.xml"
        expand(
                version: project.version
        )
    }
    from ("src/main") {
        exclude ".gradle"
        exclude "plugins/**/build.gradle"
        exclude "plugins/**/settings.gradle"
        exclude "plugins/**/.gradle"
        exclude ".*"
        exclude "local.properties"
        exclude "build_demo.xml"
        include "*.*"
        include "bin/dita"
        include "bin/dita.bat"
        exclude "docsrc/.editorconfig"
        exclude "docsrc/.github"
        exclude "docsrc/.gradle"
        exclude "docsrc/.travis"
        exclude "docsrc/.travis.yml"
        exclude "docsrc/*.md"
        exclude "docsrc/*.xpr"
        exclude "docsrc/build"
        exclude "docsrc/out"
        exclude "docsrc/platform.ditaval"
        exclude "docsrc/temp"
        include "docsrc/**"
        exclude "plugins/*/plugin.xml"
        include "plugins/org.dita.base/**"
        include "plugins/org.dita.eclipsehelp/**"
        include "plugins/org.dita.html5/**"
        exclude "plugins/org.dita.html5/build"
        exclude "plugins/org.dita.html5/.sass-cache"
        include "plugins/org.dita.htmlhelp/**"
        include "plugins/org.dita.pdf2.axf/**"
        exclude "plugins/org.dita.pdf2.axf/build"
        exclude "plugins/org.dita.pdf2.axf/src"
        include "plugins/org.dita.pdf2.fop/**"
        exclude "plugins/org.dita.pdf2.fop/build"
        include "plugins/org.dita.pdf2.xep/**"
        exclude "plugins/org.dita.pdf2.xep/build"
        exclude "plugins/org.dita.pdf2.xep/lib/xep/**"
        exclude "plugins/org.dita.pdf2.xep/src"
        include "plugins/org.dita.pdf2/**"
        exclude "plugins/org.dita.pdf2/src/**"
        exclude "plugins/org.dita.pdf2/build"
        exclude "plugins/org.dita.pdf2/bin/**"
        include "plugins/org.dita.specialization.dita11/**"
        include "plugins/org.dita.xhtml/**"
        include "plugins/org.oasis-open.dita.v1_2/**"
        include "plugins/org.oasis-open.dita.v1_3/**"
        exclude "temp"
        include "config/**"
        include "resources/plugin.rnc"
        // legacy build scripts
        include "startcmd.*"
        include "bin/ant"
        include "bin/ant.*"
    }
    destinationDir = distTempDir
}
copyDistTemp.outputs.dir distTempDir

task integrateDistTemp(type: JavaExec, dependsOn: [copyDistTemp, ":fo:copyDistTemp", ":axf:copyDistTemp", ":fop:copyDistTemp", ":xep:copyDistTemp", ":eclipsehelp:copyDistTemp", ":htmlhelp:copyDistTemp"]) {
    main = "org.apache.tools.ant.launch.Launcher"
    classpath = sourceSets.main.runtimeClasspath + files("${distTempDir}", "${projectDir}/src/main/config")
    workingDir distTempDir
    args "-f"
    args file("${distTempDir}/integrator.xml")
}

task integrateDistPlugins() {
    dependsOn bundled.collect{ name, url ->
        return tasks.create("integrateDist${name}", JavaExec) {
            main = "org.apache.tools.ant.launch.Launcher"
            classpath = sourceSets.main.runtimeClasspath + files("${distTempDir}", "${projectDir}/src/main/config")
            workingDir distTempDir
            args "-f"
            args file("${distTempDir}/integrator.xml")
            args "install"
            args "-Dplugin.file=${url}"
        }.name
    }
}
integrateDistPlugins.mustRunAfter integrateDistTemp

task generateDocs(type: Exec, dependsOn: integrateDistTemp) {
    workingDir = file("${distTempDir}/docsrc")
    commandLine = Os.isFamily(Os.FAMILY_WINDOWS) ? file("${distTempDir}/docsrc/gradlew.bat") : file("${distTempDir}/docsrc/gradlew")
    args = ["--no-daemon", "dist"]
}
generateDocs.mustRunAfter integrateDistPlugins
generateDocs.onlyIf { skipDocs() }

task cleanGenerateDocs(type: Delete) {
    delete "${distTempDir}/temp"
    delete "${distTempDir}/docsrc/.gradle"
    delete "${distTempDir}/docsrc/temp"
}
cleanGenerateDocs.mustRunAfter generateDocs
cleanGenerateDocs.onlyIf { skipDocs() }

def skipDocs() {
    !(project.hasProperty('skipGenerateDocs') && Boolean.parseBoolean(project.property('skipGenerateDocs')))
}

task generateJavadocs(type: Javadoc) {
    classpath = sourceSets.main.compileClasspath
    source = sourceSets.main.allJava
    include "**/org/dita/dost/*.*"
    include "**/org/dita/dost/exception/DITAOTException.*"
    include "**/org/dita/dost/util/Configuration.*"
    options.addStringOption("public")
    title = "${project.description} ${project.version}"
    destinationDir = file("${distTempDir}/doc/api")
}
generateJavadocs.onlyIf { skipDocs() }

def plugins = [
        "org.dita.eclipsehelp",
        "org.dita.html5",
        "org.dita.htmlhelp",
        "org.dita.pdf2",
        "org.dita.pdf2.axf",
        "org.dita.pdf2.fop",
        "org.dita.pdf2.xep",
        "org.dita.xhtml",
]

task distPlugins() {
    dependsOn plugins.collect{ name ->
        def taskName = "distPlugin${name.split("\\.").collect{token -> return token.capitalize()}.join("")}"
        return tasks.create(taskName, Zip) {
            from ("${distTempDir}/plugins/${name}") {
                exclude "build"
                exclude "src"
                exclude "out"
            }
            archiveName "${name}-${version}.zip"
        }.name
    }
}
distPlugins.mustRunAfter integrateDistPlugins

task distPluginChecksums() {
    doLast {
        ant.checksum(algorithm: "SHA-256", fileext: ".sha256") {
            fileset(dir: "${buildDir}/distributions") {
                include(name: '*.zip')
            }
        }
    }
}
distPluginChecksums.mustRunAfter distPlugins
generateNotices.mustRunAfter distPlugins

task dist(type: Zip, dependsOn: [jar, integrateDistTemp, integrateDistPlugins, distPlugins, distPluginChecksums, generateNotices, generateDocs, cleanGenerateDocs, generateJavadocs]) {
    into("dita-ot-${distVersion}") {
        from (distTempDir) {
            exclude "bin/dita"
            exclude "bin/dita.bat"
            // legacy build scripts
            exclude "startcmd.*"
            exclude "bin/ant"
            exclude "bin/ant.*"
        }
        from (distTempDir) {
            fileMode = 0755
            include "bin/dita"
            include "bin/dita.bat"
            // legacy build scripts
            include "startcmd.*"
            include "bin/ant"
            include "bin/ant.*"
        }
    }
    archiveName "dita-ot-${distFileName}.zip"
}

test {
    inputs.files (
        'src/test/xsl/common/dita-utilities.xspec',
        'src/test/xsl/common/uri-utils.xspec',
        'src/test/xsl/plugins/org.dita.html5/xsl/functions.xspec',
        'src/test/xsl/preprocess/conrefImpl.xspec',
        'src/test/xsl/preprocess/maplinkImpl.xspec'
    )
}

// Repository deployment

def getRepositoryUsername() {
    return project.hasProperty('ossrhUsername') ?
            project.property('ossrhUsername') :
            System.env.containsKey('OSSRH_USERNAME') ?
                    System.env['OSSRH_USERNAME'] :
                    ""
}

def getRepositoryPassword() {
    return project.hasProperty('ossrhPassword') ?
            project.property('ossrhPassword') :
            System.env.containsKey('OSSRH_PASSWORD') ?
                    System.env['OSSRH_PASSWORD'] :
                    ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            afterEvaluate {
                pom {
                    name = 'DITA Open Toolkit'
                    description = 'DITA-OT base library'
                    url = 'https://www.dita-ot.org/'
                    scm {
                        connection = 'scm:git:https://github.com/dita-ot/dita-ot.git'
                        developerConnection = 'scm:git:git@github.com:dita-ot/dita-ot.git'
                        url = 'https://github.com/dita-ot/dita-ot/'
                    }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'robander'
                            name = 'Robert D Anderson'
                            email = 'robander@us.ibm.com'
                        }
                        developer {
                            id = 'jelovirt'
                            name = 'Jarno Elovirta'
                            email = 'jarno@elovirta.com'
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}