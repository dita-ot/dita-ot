/*
 * This file is part of the DITA Open Toolkit project.
 *
 * Copyright 2015 Jarno Elovirta
 *
 * See the accompanying LICENSE file for applicable license.
 */
apply plugin: 'java'
apply plugin: 'maven'

group = 'org.dita-ot'
version = '2.3.3'

description = """DITA Open Toolkit"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
     mavenCentral()
}
dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'commons-codec', name: 'commons-codec', version:'1.10'
    compile group: 'xerces', name: 'xercesImpl', version:'2.11.0'
    compile group: 'xml-apis', name: 'xml-apis', version:'1.4.01'
    compile group: 'xml-resolver', name: 'xml-resolver', version:'1.2'
    compile group: 'net.sourceforge.saxon', name: 'saxon', version:'9.1.0.8', classifier:'dom'
    compile group: 'net.sourceforge.saxon', name: 'saxon', version:'9.1.0.8'
    compile group: 'com.ibm.icu', name: 'icu4j', version:'57.1'
    compile group: 'org.apache.ant', name: 'ant', version:'1.9.7'
    compile group: 'org.apache.ant', name: 'ant-launcher', version:'1.9.7'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    runtime group: 'org.apache.ant', name: 'ant-apache-resolver', version:'1.9.7'
    testCompile group: 'nu.validator.htmlparser', name: 'htmlparser', version:'1.4'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'xmlunit', name: 'xmlunit', version:'1.6'
}

jar.archiveName = "${project.name}.jar"

test {
    exclude '**/IntegrationTest.class'
}

// Integration test

def integrationTestSystemProperties = [
        temp_dir : "${buildDir}/tmp/integrationTest",
        dita_dir : "${projectDir}/src/main",
        basedir : "${projectDir}/src/test"
]
if (System.getProperty("test") != null) {
    integrationTestSystemProperties["test"] = System.getProperty("test")
}
if (System.getProperty("log_level") != null) {
    integrationTestSystemProperties["log_level"] = System.getProperty("log_level")
}

task integrationTest(type: Test, dependsOn: 'buildLocal') {
    minHeapSize = "128m"
    maxHeapSize = "1024m"
    systemProperties = integrationTestSystemProperties
    include '**/IntegrationTest.class'
}

// Install

defaultTasks 'buildLocal'

task copyInstall(type: Copy) {
    from (configurations.runtime.allArtifacts.files)
    from (configurations.runtime) {
        rename "ant-launcher(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant-launcher.jar"
        rename "ant(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant.jar"
    }
    destinationDir = file("src/main/lib")
}
task buildLocal(type: JavaExec, dependsOn: [copyInstall, ":fo:copyInstall", ":axf:copyInstall", ":xep:copyInstall", ":html5:compileSass"]) {
    description "Build archives and install all plugins with dependencies"
    main = "org.apache.tools.ant.launch.Launcher"
    classpath = sourceSets.main.runtimeClasspath + files("${projectDir}/src/main", "${projectDir}/src/main/lib", "${projectDir}/src/main/resources")
    workingDir file("${projectDir}/src/main")
    args "-f"
    args file("${projectDir}/src/main/integrator.xml")
}

// Distribution

def distTempDir = file("${buildDir}/tmp/dist")
def distVersion = project.hasProperty("commit") && (!project.hasProperty("tag") || tag.empty) ?
                  "${project.version}+${commit.substring(0, 7)}" :
                  "${project.version}"
def distFileName = (project.hasProperty("tag") && tag.empty) ?
                   "develop" :
                   "${project.version}"

task cleanDistTemp(type: Delete) {
    delete distTempDir
}

task initDist(dependsOn: [jar, cleanDistTemp]) << {
    distTempDir.mkdirs()
    println "distVersion: ${distVersion}"
    println "distFileName: ${distFileName}"
}

task copyDistTemp(type: Copy, dependsOn: initDist) {
    from (configurations.runtime.allArtifacts.files) {
        into "lib"
    }
    from (configurations.runtime) {
        into "lib"
        rename "ant-launcher(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant-launcher.jar"
        rename "ant(-\\d+(\\.\\d+(\\.\\d+)?)?)\\.jar", "ant.jar"
    }
    from (".") {
        include "LICENSE"
    }
    from ("src/main") {
        exclude "**/.gradle"
        exclude "**/build.gradle"
        exclude "**/settings.gradle"
        exclude ".*"
        exclude "local.properties"
        exclude "build.log"
        exclude "build_demo.xml"
        exclude "catalog-dita.txt"
        include "*.*"
        include "bin/dita"
        include "bin/dita.bat"
        exclude "docsrc/*.md"
        exclude "docsrc/*.xpr"
        exclude "docsrc/site.*"
        exclude "docsrc/build"
        exclude "docsrc/temp"
        include "docsrc/**"
        include "dtd/**"
        //include "lib/**/*.properties"
        include "lib/configuration.properties"
        exclude "plugins/org.dita-ot.html/**"
        exclude "plugins/org.dita.html5/.sass-cache"
        exclude "plugins/org.dita.html5/build"
        exclude "plugins/org.dita.pdf2/src/**"
        exclude "plugins/org.dita.pdf2/build"
        exclude "plugins/org.dita.pdf2/bin/**"
        exclude "plugins/org.dita.pdf2.axf/build"
        exclude "plugins/org.dita.pdf2.axf/src"
        exclude "plugins/org.dita.pdf2.fop/build"
        exclude "plugins/org.dita.pdf2.xep/build"
        exclude "plugins/org.dita.pdf2.xep/lib/xep/**"
        exclude "plugins/org.dita.pdf2.xep/src"
        exclude "temp"
        include "plugins/**"
        exclude "resources/org"
        include "resources/**"
        include "xsl/**"
        // legacy build scripts
        include "startcmd.*"
        include "bin/ant"
        include "bin/ant.*"
    }
    destinationDir = distTempDir
}
copyDistTemp.outputs.dir distTempDir

task updateConfiguration() << {
    if (project.hasProperty('commit') && !commit.empty) {
        ant.propertyfile(file: "${distTempDir}/lib/configuration.properties") {
            entry(key: "otversion", operation: "=", value: "${distVersion}")
        }
    }
}
updateConfiguration.mustRunAfter copyDistTemp

task integrateDistTemp(type: JavaExec, dependsOn: [copyDistTemp, ":fo:copyDistTemp", ":axf:copyDistTemp", ":xep:copyDistTemp", updateConfiguration]) {
    main = "org.apache.tools.ant.launch.Launcher"
    classpath = sourceSets.main.runtimeClasspath + files("${distTempDir}", "${distTempDir}/lib", "${distTempDir}/resources")
    workingDir distTempDir
    args "-f"
    args file("${distTempDir}/integrator.xml")
}

task generateDocs(type: JavaExec, dependsOn: integrateDistTemp) {
    main = "org.apache.tools.ant.launch.Launcher"
    classpath = sourceSets.main.runtimeClasspath + files("${distTempDir}", "${distTempDir}/lib", "${distTempDir}/resources")
    workingDir distTempDir
    args "-f"
    args file("${distTempDir}/docsrc/build.xml")
    args "-Dbasedir=" + file("${distTempDir}/docsrc")
    args "-Ddita.home=" + distTempDir
    args "dist"
}
task cleanGenerateDocs(type: Delete) {
    delete "${distTempDir}/docsrc/temp"
}
cleanGenerateDocs.mustRunAfter generateDocs

task distZip(type: Zip, dependsOn: [jar, generateDocs, cleanGenerateDocs]) {
    into("dita-ot-${distVersion}") {
        from (distTempDir) {
            exclude "bin/dita"
            exclude "bin/dita.bat"
            // legacy build scripts
            exclude "startcmd.*"
            exclude "bin/ant"
            exclude "bin/ant.*"
        }
        from (distTempDir) {
            fileMode = 0755
            include "bin/dita"
            include "bin/dita.bat"
            // legacy build scripts
            include "startcmd.*"
            include "bin/ant"
            include "bin/ant.*"
        }
    }
    archiveName "dita-ot-${distFileName}.zip"
}
task distTarGz(type: Tar, dependsOn: [jar, generateDocs]) {
    compression = Compression.GZIP
    into("dita-ot-${distVersion}") {
        from (distTempDir ) {
            exclude "bin/dita"
            exclude "bin/dita.bat"
            // legacy build scripts
            exclude "startcmd.*"
            exclude "bin/ant"
            exclude "bin/ant.*"
        }
        from (distTempDir) {
            fileMode = 0755
            include "bin/dita"
            include "bin/dita.bat"
            // legacy build scripts
            include "startcmd.*"
            include "bin/ant"
            include "bin/ant.*"
        }
    }
    archiveName "dita-ot-${distFileName}.tar.gz"
}
task dist(dependsOn: [distZip]) << {
    // NOOP
}

test {
    inputs.files (
        'src/test/xsl/common/dita-utilities.xspec',
        'src/test/xsl/common/uri-utils.xspec',
        'src/test/xsl/plugins/org.dita.html5/xsl/functions.xspec',
        'src/test/xsl/preprocess/maplinkImpl.xspec'
    )
}
