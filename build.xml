<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the DITA Open Toolkit project.
     See the accompanying license.txt file for applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!-- build whole binary package for DITA Open Toolkit -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="build_DITA-OT_package" default="dist" basedir=".">
  <description>Build binary packages for DITA Open Toolkit</description>

  <property file="${basedir}/src/main/lib/configuration.properties"/>
  <property file="${basedir}/build.properties"/>

  <condition property="HTMLHelpCompiler" value="C:\Program Files\HTML Help Workshop\hhc.exe">
    <available file="C:\Program Files\HTML Help Workshop\hhc.exe"/>
  </condition>
  <condition property="HTMLHelpCompiler" value="C:\Program Files (x86)\HTML Help Workshop\hhc.exe">
    <available file="C:\Program Files (x86)\HTML Help Workshop\hhc.exe"/>
  </condition>

  <property name="src.dir" location="${basedir}/src/main"/>
  <property name="java.dir" location="${src.dir}/java/"/>
  <property name="lib.dir" location="${src.dir}/lib/"/>
  <property name="doc.dir" location="${src.dir}/docsrc/"/>
  <property name="dtd.dir" location="${src.dir}/dtd/"/>
  <property name="schema.dir" location="${src.dir}/schema/"/>
  <property name="xsl.dir" location="${src.dir}/xsl/"/>
  <property name="sample.dir" location="${src.dir}/samples/"/>
  <property name="css.dir" location="${src.dir}/css/"/>
  <property name="resource.dir" location="${src.dir}/resource/"/>

  <property name="top.work.dir" location="${src.dir}"/>
  <property name="package.output.dir" location="${basedir}/target/dist"/>
  <property name="bin.dir" location="${basedir}/target/classes"/>
  <tstamp>
    <format property="current.date" pattern="yyyyMMddHHmmssSSS"/>
  </tstamp>
  <property name="work.dir" location="${top.work.dir}/temp/${current.date}/"/>
  <property name="build.dir" location="${bin.dir}/build"/>
  <property name="out.dir" location="${work.dir}/out/"/>
  <property name="doc.out.dir" location="${out.dir}/doc"/>

  <property name="dost.jar" location="${lib.dir}/dost.jar"/>
  <property name="binary-min" value="DITA-OT${otversion}_minimal_bin"/>
  <!--property name="binary-big" value="DITA-OT${otversion}_full_easy_install_bin"/-->
  <property name="binary-client" value="DITA-OT${otversion}_client_bin"/>
  <property name="binary" value="DITA-OT${otversion}_standard_bin"/>
  <property name="win32.zip.suffix" value=".zip"/>
  <property name="linux.zip.suffix" value=".tar.gz"/>

  <property name="tool.ant.version" value="1.9.4"/>

  <target name="init-package" depends="clean-package">
    <mkdir dir="${package.output.dir}"/>
  </target>

  <target name="clean-package">
    <delete dir="${package.output.dir}"/>
  </target>

  <target name="init-java" depends="clean-java, init-ivy">
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${bin.dir}"/>
    <ivy:retrieve pattern="${lib.dir}/[artifact](-[classifier]).[ext]" conf="compile"/>    
    <ivy:cachepath pathid="compile.path" conf="compile"/>
  </target>

  <target name="clean-java">
    <delete dir="${lib.dir}/dost.jar"/>
    <delete dir="${bin.dir}"/>
  </target>

  <target name="compile" depends="init-java" description="Compile Java">
    <javac srcdir="${java.dir}" destdir="${bin.dir}"
           debug="on"
           source="1.7" target="1.7"
           classpathref="compile.path">
      <exclude name="org/dita/dost/invoker/JavaInvoker.java"/>
      <exclude name="org/dita/dost/invoker/CommandLineInvoker"/>
    </javac>
  </target>

  <target name="jar" depends="compile" description="Build Java libraries">
    <copy todir="${bin.dir}/resource/">
      <fileset dir="${resource.dir}" includes="messages.*"/>
    </copy>
    <copy todir="${bin.dir}">
      <fileset dir="${java.dir}" includes="**/*.properties, **/*.xml"/>
    </copy>
    <jar destfile="${dost.jar}">
      <fileset dir="${bin.dir}"/>
      <fileset dir="${src.dir}/resources"/>
    </jar>
  </target>
  
  <patternset id="pattern.global.excludes">
    <exclude name=".*"/>
    <exclude name="local.properties"/>
    <exclude name="build.log"/>
    <exclude name="lib/commons-logging-1.1.1.jar"/>
    <exclude name="plugins/net.sourceforge.dita-ot.html/**"/>
    <exclude name="plugins/org.dita.pdf2/bin/**"/>
    <exclude name="plugins/org.dita.pdf2/lib/xep/**"/>
  </patternset>

  <patternset id="pattern.package.minimum">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="plugins/org.dita.pdf2/fop/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <exclude name="lib/saxon*"/>
    <exclude name="lib/icu4j.jar"/>
    <exclude name="startcmd.*"/>
    <exclude name="buildPackage.*"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/org.dita.*/**"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <exclude name="demo/**"/>
    <include name="dtd/**"/>
    <include name="resource/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/dost.jar"/>
    <include name="lib/APACHE-LICENSE-2_0.html"/>
    <include name="lib/xml-resolver.jar"/>
    <include name="lib/**"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.minimum">
    <exclude name="**/*"/>
    <!--include name="h2d/**"/-->
  </patternset>

  <patternset id="pattern.package.client">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="buildPackage.*"/>
    <exclude name="lib/saxon*"/>
    <include name="startcmd.*"/>
    <include name="build_demo.xml"/>
    <exclude name="catalog-dita.txt"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <include name="plugins/org.dita.specialization.eclipsemap/**"/>
    <include name="plugins/org.dita.specialization.dita11/**"/>
    <include name="plugins/org.dita.specialization.dita132/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="bin/dita"/>
    <include name="bin/dita.bat"/>
    <include name="docsrc/**"/>
    <exclude name="demo/**"/>
    <include name="dtd/**"/>
    <include name="plugins/**"/>
    <include name="resource/**"/>
    <include name="samples/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/**"/>    
  </patternset>
  <patternset id="pattern.package.ext-plugins.client">
    <exclude name="**/*"/>
    <!--include name="h2d/**"/>
    <include name="legacypdf/**"/-->
  </patternset>

  <!--patternset id="pattern.package.full">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="buildPackage.*"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <include name="plugins/org.dita.specialization.eclipsemap/**"/>
    <include name="plugins/org.dita.specialization.dita11/**"/>
    <include name="plugins/org.dita.specialization.dita132/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="docsrc/**"/>
    <exclude name="demo/**"/>
    <include name="dtd/**"/>
    <include name="plugins/**"/>
    <include name="resource/**"/>
    <include name="samples/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/**"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.full">
    <exclude name="**/*"/>
    <!- -include name="h2d/**"/- ->
    <!- -include name="legacypdf/**"/- ->
  </patternset-->

  <patternset id="pattern.package.standard">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="plugins/org.dita.pdf2/fop/build/"/>
    <exclude name="plugins/org.dita.pdf2/fop/conf/"/>
    <exclude name="plugins/org.dita.pdf2/fop/lib/"/>
    <exclude name="plugins/org.dita.pdf2/lib/icu4j.jar"/>
    <!--exclude name="lib/saxon*"/-->
    <exclude name="lib/icu4j.jar"/>
    <exclude name="startcmd.*"/>
    <exclude name="buildPackage.*"/>
    <exclude name="src/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <include name="plugins/org.dita.specialization.eclipsemap/**"/>
    <include name="plugins/org.dita.specialization.dita11/**"/>
    <include name="plugins/org.dita.specialization.dita132/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="docsrc/**"/>
    <exclude name="demo/**"/>
    <include name="dtd/**"/>
    <include name="plugins/**"/>
    <include name="resource/**"/>
    <include name="samples/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/**"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.standard">
    <exclude name="**/*"/>
    <!--include name="h2d/**"/-->
    <!--include name="legacypdf/**"/-->
  </patternset>
    
  <patternset id="pattern.package.doc">
    <include name="relnotes.html"/>
    <include name="doc/**"/>
    <exclude name="**/*.hhp"/>
    <exclude name="**/*.hhc"/>
    <exclude name="**/*.hhk"/>
    <exclude name="**/*.fo"/>
    <exclude name="**/*.log"/>
    <exclude name="**/*.list"/>
    <exclude name="**/*.temp"/>
    <exclude name="**/*.db"/>
  </patternset>

  <target name="dependencies">
    <get src="http://archive.apache.org/dist/ant/binaries/apache-ant-${tool.ant.version}-bin.zip"
         dest="${basedir}/target/"
         skipexisting="true"/>
    <unzip src="${basedir}/target/apache-ant-${tool.ant.version}-bin.zip"
           dest="${basedir}/target/tools"/>
  </target>

  <target name="package-binary-minimum">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${otversion}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.minimum"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.minimum"/>
      </fileset>
    </copy>
    <!-- no documentation -->
    <ant antfile="${temp.dist.dir}/integrator.xml" dir="${temp.dist.dir}"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <fileset dir="${work.dir}/${param.out.file}"/>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}"/>
    </tar>
  </target>

  <target name="package-binary-standard">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${otversion}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.standard"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.standard"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
    <ant antfile="${temp.dist.dir}/integrator.xml" dir="${temp.dist.dir}"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <fileset dir="${work.dir}/${param.out.file}"/>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}"/>
    </tar>
  </target>

  <target name="package-binary-client" depends="dependencies">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${otversion}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.client"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/lib">
      <fileset dir="${lib.dir}">
        <include name="saxon.jar"/>
        <include name="saxon-dom.jar"/>
      </fileset>
      <fileset dir="${basedir}/target/tools/apache-ant-${tool.ant.version}/lib">
        <include name="ant.jar"/>
        <include name="ant-launcher.jar"/>
        <include name="ant-apache-resolver.jar"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/bin">
      <fileset dir="${basedir}/target/tools/apache-ant-${tool.ant.version}/bin">
        <include name="ant"/>
        <include name="ant.bat"/>
      </fileset>
    </copy>
    
    <!--copy todir="${temp.dist.dir}">
      <zipfileset src="${basedir}/target/apache-ant-${tool.ant.version}-bin.zip">
        <!- -exclude name="apache-ant-${tool.ant.version}/etc/**"/>
        <exclude name="apache-ant-${tool.ant.version}/manual/**"/>
        <include name="apache-ant-${tool.ant.version}/*"/>
        <exclude name="apache-ant-${tool.ant.version}/bin/**"/- ->
        <include name="apache-ant-${tool.ant.version}/lib/ant.jar"/>
        <include name="apache-ant-${tool.ant.version}/lib/ant-launcher.jar"/>
        <include name="apache-ant-${tool.ant.version}/lib/ant-apache-resolver.jar"/>
      </zipfileset>
      <mapper type="glob" from="apache-ant-${tool.ant.version}/*" to="*"/>
    </copy-->
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.client"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
    <ant antfile="${temp.dist.dir}/integrator.xml" dir="${temp.dist.dir}"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}" filesonly="true">
      <zipfileset dir="${work.dir}/${param.out.file}">
        <exclude name="${package.name.root}${otversion}/bin/*"/>
      </zipfileset>
      <zipfileset dir="${work.dir}/${param.out.file}" filemode="755">
        <include name="${package.name.root}${otversion}/bin/*"/>
      </zipfileset>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}">
        <exclude name="${package.name.root}${otversion}/bin/*"/>
      </tarfileset>
      <tarfileset dir="${work.dir}/${param.out.file}" mode="755">
        <include name="${package.name.root}${otversion}/bin/*"/>
      </tarfileset>
    </tar>
  </target>

  <!--target name="package-binary-full" depends="dependencies">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${otversion}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.full"/>
      </fileset>
    </copy>
    <mkdir dir="${temp.dist.dir}/tools/ant"/>
    <copy todir="${temp.dist.dir}/tools/ant">
      <fileset dir="${basedir}/target/tools/apache-ant-${tool.ant.version}">
       <exclude name="etc/**"/>
       <exclude name="manual/**"/>
       <exclude name="fetch.xml"/>
       <exclude name="get-m2.xml"/>
       <exclude name="lib/*.pom"/>
       <include name="*"/>
       <include name="bin/**"/>
       <include name="lib/**"/>
     </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.full"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
    <ant antfile="${temp.dist.dir}/integrator.xml" dir="${temp.dist.dir}"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <zipfileset dir="${work.dir}/${param.out.file}">
        <exclude name="*/startcmd.sh"/>
      </zipfileset>
      <zipfileset dir="${work.dir}/${param.out.file}" filemode="755">
        <include name="*/startcmd.sh"/>
      </zipfileset>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}">
        <exclude name="*/startcmd.sh"/>
      </tarfileset>
      <tarfileset dir="${work.dir}/${param.out.file}" mode="755">
        <include name="*/startcmd.sh"/>
      </tarfileset>
    </tar>
  </target-->
  
  <target name="build-package-binary" depends="jar, jar.plug-ins, update-doc">
    <mkdir dir="${out.dir}"/>
    <sequential>
      <antcall target="package-binary-client">
        <param name="param.out.file" value="${binary-client}"/>
      </antcall>
      <!--antcall target="package-binary-full">
        <param name="param.out.file" value="${binary-big}"/>
      </antcall-->
      <antcall target="package-binary-standard">
        <param name="param.out.file" value="${binary}"/>
      </antcall>
      <antcall target="package-binary-minimum">
        <param name="param.out.file" value="${binary-min}"/>
      </antcall>
    </sequential>
  </target>
	
  <target name="jar.plug-ins" description="Build plug-in Java libraries">
    <ant antfile="${src.dir}/plugins/org.dita.pdf2/buildPackage.xml" target="jar" inheritAll="false">
  	  <property name="basedir" value="${src.dir}/plugins/org.dita.pdf2"/>
      <reference refid="compile.path" torefid="base.compile.path"/>
  	</ant>
  </target>

  <target name="dist"
    depends="init-package, build-package-binary, cleanup" description="Build distribution packages"/>

  <target name="cleanup" unless="skip.cleanup">
    <delete dir="${work.dir}"/>
  </target>

  <target name="update-doc" unless="doc.skip">
    <ant antfile="${src.dir}/integrator.xml" target="integrate">
      <property name="basedir" value="${src.dir}"/>
    </ant>
    <ant antfile="${doc.dir}/build.xml">
      <property name="basedir" value="${src.dir}"/>
      <property name="output.dir" location="${work.dir}/htmlhelp"/>
      <property name="base.temp.dir" location="${work.dir}"/>
      <property name="preprocess.copy-generated-files.skip" value="true"/>
      <property name="args.gen.task.lbl" value="YES"/>
      <property name="args.css" value="dita-ot-doc.css"/>
      <property name="args.cssroot" value="${doc.dir}/resource"/>
    </ant>
    <!--
    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide-book.ditamap"/>
      <property name="output.dir" location="${doc.out.dir}"/>
      <property name="outputFile.base" value="userguide"/>
      <property name="transtype" value="pdf"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>

    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide.ditamap"/>
      <property name="output.dir" location="${work.dir}/htmlhelp"/>
      <property name="transtype" value="htmlhelp"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <copy todir="${doc.out.dir}" failonerror="no">
      <fileset dir="${work.dir}/htmlhelp">
        <include name="*.chm"/>
      </fileset>
    </copy>

    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide.ditamap"/>
      <property name="output.dir" location="${doc.out.dir}/html"/>
      <property name="outputFile.base" value="index"/>
      <property name="args.csspath" value="css"/>
      <property name="transtype" value="tocjs"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <move file="${doc.out.dir}/html/userguide.html" tofile="${doc.out.dir}/html/index.html"/>
    -->
    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/readme/changes/rel${otrelease}.xml"/>
      <property name="output.dir" location="${work.dir}/relnotes"/>
      <property name="args.csspath" value="resource"/>
      <property name="transtype" value="xhtml"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <copy file="${work.dir}/relnotes/rel${otrelease}.html" tofile="${out.dir}/relnotes.html"/>
    
    <delete failonerror="yes" includeemptydirs="true">
      <fileset dir="${doc.out.dir}">
        <include name="**/dita.list"/>
        <include name="**/dita.xml.properties"/>
      </fileset>
    </delete>
  </target>

  <target name="doc" depends="update-doc" description="Build documentation">
    <copy todir="${src.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
  </target>

  <!-- Test -->
  
  <property name="test.src.dir" location="${basedir}/src/test"/>
  <property name="test.java.dir" location="${test.src.dir}/java"/>
  <property name="test.lib.dir" location="${test.src.dir}/lib"/>
  <property name="test.bin.dir" location="${basedir}/target/test-classes"/>
  <property name="test.log.dir" location="${test.src.dir}/log"/>
  <property name="test.suite.dir" location="${test.src.dir}/testsuite"/>

  <target name="test-init">
    <ivy:retrieve pattern="${test.lib.dir}/[artifact](-[classifier]).[ext]" conf="test"/>
    <ivy:cachepath pathid="test.path" conf="test"/>    
  </target>

  <target name="test-compile" depends="test-init, compile">
    <delete failonerror="false">
      <fileset dir="${test.bin.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.bin.dir}"/>
    <javac destdir="${test.bin.dir}"
           debug="on"
           source="1.6" target="1.6">
      <src>
        <pathelement location="${test.java.dir}"/>
      </src>
      <classpath>
        <path refid="test.path"/>
        <pathelement location="${bin.dir}"/>
        <path refid="compile.path"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile, test-compile" description="Run unit tests">
    <delete failonerror="false">
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.log.dir}"/>
    <junit printsummary="yes" haltonfailure="yes" showoutput="true">
      <classpath>
        <pathelement location="${test.bin.dir}"/>
        <pathelement location="${test.src.dir}/resources"/>
        <path refid="test.path"/>
        <pathelement location="${bin.dir}"/>
        <pathelement location="${src.dir}/resources"/>
        <path refid="compile.path"/>
      </classpath>
      <formatter type="plain"/>
      <batchtest fork="yes" todir="${test.log.dir}">
        <fileset dir="${test.java.dir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <exclude name="org/dita/dost/TestUtils.java"/>
          <exclude name="org/dita/dost/IntegrationTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <property name="integration-test.bin.dir" location="${basedir}/target/integration-test-classes"/>
  
  <target name="integration-test-compile" depends="compile, test-compile">
    <delete failonerror="false">
      <fileset dir="${integration-test.bin.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${integration-test.bin.dir}"/>
    <javac destdir="${integration-test.bin.dir}"
           debug="on"
           source="1.6" target="1.6">
      <src>
        <pathelement location="${test.suite.dir}/src/main/java"/>
      </src>
      <classpath>
        <pathelement location="${test.bin.dir}"/>
        <path refid="test.path"/>
        <pathelement location="${bin.dir}"/>
        <path refid="compile.path"/>
      </classpath>
    </javac>
  </target>
  
  <target name="integration-test" depends="compile, test-compile, integration-test-compile" description="Run integration tests">
    <condition property="only-test.name" value="${test}" else="">
      <isset property="test"/>
    </condition>
    <delete failonerror="false">
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.log.dir}"/>
    <junit printsummary="false" haltonfailure="yes" showoutput="false" logfailedtests="true">
      <classpath>
        <pathelement location="${integration-test.bin.dir}"/>
        <pathelement location="${test.bin.dir}"/>
        <pathelement location="${test.src.dir}/resources"/>
        <path refid="test.path"/>
        <pathelement location="${bin.dir}"/>
        <pathelement location="${src.dir}/resources"/>
        <path refid="compile.path"/>
      </classpath>
      <sysproperty key="dita.dir" value="${src.dir}"/>
      <sysproperty key="basedir" value="${test.suite.dir}"/>
      <sysproperty key="only-test" value="${only-test.name}"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="plain" usefile="true"/>
      <test name="org.dita.dost.IntegrationTest" fork="no" todir="${test.log.dir}"/>
    </junit>
  </target>

  <target name="clean" depends="clean-java">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${test.bin.dir}" erroronmissingdir="false"/>
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
      <fileset dir="${integration-test.bin.dir}" erroronmissingdir="false"/>
    </delete>
  </target>

  <!-- Site -->
  
  <target name="site" description="Build project website">
    <ant antfile="${basedir}/src/main/docsrc/build.xml" target="generate-msg-topic" dir="${basedir}/src/main"/>
    <ant antfile="${basedir}/src/main/build.xml">
      <property name="args.input" location="${doc.dir}/site.ditamap"/>
      <property name="output.dir" location="${basedir}/target/site"/>
      <property name="transtype" value="net.sourceforge.dita-ot.html"/>
      <property name="base.temp.dir" location="${work.dir}"/>
      <property name="args.rellinks" value="all"/>
      <property name="args.gen.task.lbl" value="YES"/>
    </ant>
  </target>  

  <!-- Ivy -->
    
  <target name="check-ivy">
    <available property="ivy.available" classname="org.apache.ivy.ant.IvyResolve"/>
  </target>
  
  <target name="download-ivy" unless="ivy.available">
    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
         dest="${ivy.jar.file}"
         usetimestamp="true"/>
  </target>
  
  <target name="init-ivy" depends="check-ivy, download-ivy" unless="ivy.available">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>      
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant"
             classpathref="ivy.lib.path"/>
  </target>

</project>