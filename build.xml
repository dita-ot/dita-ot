<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is part of the DITA Open Toolkit project hosted on 
     Sourceforge.net. See the accompanying license.txt file for 
     applicable licenses.-->
<!-- (c) Copyright IBM Corp. 2004, 2006 All Rights Reserved. -->
<!-- build whole binary package for DITA Open Toolkit -->
<project name="build_DITA-OT_package" default="dist" basedir=".">
  <description>Build binary packages for DITA Open Toolkit</description>

  <property file="build.properties"/>

  <import file="${basedir}/src/main/local.properties.xml"/>

  <condition property="HTMLHelpCompiler" value="C:\Program Files\HTML Help Workshop\hhc.exe">
    <available file="C:\Program Files\HTML Help Workshop\hhc.exe"/>
  </condition>
  <condition property="HTMLHelpCompiler" value="C:\Program Files (x86)\HTML Help Workshop\hhc.exe">
    <available file="C:\Program Files (x86)\HTML Help Workshop\hhc.exe"/>
  </condition>

  <property name="src.dir" location="${basedir}/src/main"/>
  <property name="java.dir" location="${src.dir}/java/"/>
  <property name="lib.dir" location="${src.dir}/lib/"/>
  <property name="doc.dir" location="${src.dir}/doc/"/>
  <property name="dtd.dir" location="${src.dir}/dtd/"/>
  <property name="schema.dir" location="${src.dir}/schema/"/>
  <property name="xsl.dir" location="${src.dir}/xsl/"/>
  <property name="sample.dir" location="${src.dir}/samples/"/>
  <property name="css.dir" location="${src.dir}/css/"/>
  <property name="resource.dir" location="${src.dir}/resource/"/>

  <property name="tools.dir" location="${src.dir}/tools/"/>
  <condition property="tools.dir.present">
    <available file="${tools.dir}"/>
  </condition>
  <condition property="tools.ant.present">
    <and>
      <available file="${tools.dir}/ant/lib/ant.jar"/>
      <available file="${tools.dir}/ant/lib/ant-launcher.jar"/>
    </and>
  </condition>

  <property name="top.work.dir" location="${src.dir}"/>
  <property name="package.output.dir" location="${basedir}/target"/>
  <property name="bin.dir" location="${basedir}/target/classes"/>
  <tstamp>
    <format property="current.date" pattern="yyyyMMddHHmmssSSS"/>
  </tstamp>
  <property name="work.dir" location="${top.work.dir}/temp/${current.date}/"/>
  <property name="build.dir" location="${bin.dir}/build"/>
  <property name="out.dir" location="${work.dir}/out/"/>
  <property name="doc.out.dir" location="${out.dir}/doc"/>

  <property name="dost.jar" location="${lib.dir}/dost.jar"/>
  <property name="binary-min" value="DITA-OT${version}_minimal_bin"/>
  <property name="binary-big" value="DITA-OT${version}_full_easy_install_bin"/>
  <property name="binary" value="DITA-OT${version}_standard_bin"/>
  <property name="win32.zip.suffix" value=".zip"/>
  <property name="linux.zip.suffix" value=".tar.gz"/>

  <target name="mktools-check-ant-access" unless="tools.ant.present">
    <mkdir dir="${tools.dir}"/>
    <echo>'ant' not available in src/main/tools directory.</echo>
    <echo>Attempting to download now.</echo>
    <get src="http://archive.apache.org/dist/ant/binaries/RELEASE-NOTES-1.6.0.html" dest="${tools.dir}" retries="1" maxtime="5"/>
    <condition property="ant.accessible" value="true">
      <available file="${tools.dir}/RELEASE-NOTES-1.6.0.html"/>
    </condition>
    <fail unless="ant.accessible">Cannot access the apache-ant archive.
    Please download ant 1.8.4 or later and install into the src/main/tools directory.</fail>
  </target>

  <target name="setup-tools-dir" depends="mktools-check-ant-access" unless="tools.ant.present">
    <get src="http://archive.apache.org/dist/ant/binaries/apache-ant-1.8.4-bin.zip" dest="${tools.dir}" verbose="true"/>
    <unzip src="${tools.dir}/apache-ant-1.8.4-bin.zip" dest="${tools.dir}"/>
    <delete file="${tools.dir}/apache-ant-1.8.4-bin.zip"/>
    <delete file="${tools.dir}/RELEASE-NOTES-1.6.0.html"/>
    <move file="${tools.dir}/apache-ant-1.8.4" tofile="${tools.dir}/ant"/>
  </target>

  <target name="init-package" depends="setup-tools-dir, clean-package">
    <mkdir dir="${package.output.dir}"/>
  </target>

  <target name="clean-package">
    <delete dir="${package.output.dir}"/>
  </target>

  <target name="init-java" depends="clean-java">
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${bin.dir}"/>
  </target>

  <target name="clean-java">
    <delete dir="${lib.dir}/dost.jar"/>
    <delete dir="${bin.dir}"/>
  </target>

  <target name="build-java" depends="compile"/>
  <target name="compile" depends="init-java" description="Compile Java">
    <javac srcdir="${java.dir}" destdir="${bin.dir}"
           classpathref="dost.compile.classpath"
           includeantruntime="false"
           debug="on"
           source="1.5" target="1.5">
      <exclude name="org/dita/dost/invoker/JavaInvoker.java"/>
    </javac>
  </target>

  <target name="package-java" depends="jar"/>
  <target name="jar" depends="compile" description="Build Java libraries">
    <copy todir="${bin.dir}/resource/">
      <fileset dir="${resource.dir}" includes="messages.*"/>
    </copy>
    <copy todir="${bin.dir}">
      <fileset dir="${java.dir}" includes="**/*.properties, **/*.xml"/>
    </copy>
    <jar destfile="${dost.jar}">
      <fileset dir="${bin.dir}"/>
      <fileset dir="${src.dir}/resources"/>
      <manifest>
        <attribute name="Implementation-Version" value="${version}"/>
        <attribute name="Main-Class" value="org.dita.dost.invoker.CommandLineInvoker"/>
      </manifest>
    </jar>
  </target>

  <patternset id="pattern.global.excludes">
    <exclude name=".*"/>
    <exclude name="build.log"/>
    <exclude name="build.number"/>
    <exclude name="relnotes.txt"/>
    <exclude name="EvaluateOT.html"/>
    <exclude name="lib/commons-logging-1.1.1.jar"/>
    <exclude name="plugins/net.sourceforge.dita-ot.html/**"/>
    <exclude name="buildSourceForge.xml"/>
    <exclude name="doc/sourceforge/**"/>
    <exclude name="doc/userguide-orig/**"/>
    <exclude name="doc/ot-userguide/**"/>
    <exclude name="doc/archive/**"/>
    <exclude name="doc/langref-dita1.1/**"/>
  </patternset>

  <patternset id="pattern.package.ant">
    <exclude name="tools/ant/etc/**"/>
    <exclude name="tools/ant/manual/**"/>
    <include name="tools/ant/*"/>
    <include name="tools/ant/bin/**"/>
    <include name="tools/ant/lib/**"/>
  </patternset>

  <patternset id="pattern.package.minimum">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="plugins/org.dita.pdf2/fop/build/"/>
    <exclude name="plugins/org.dita.pdf2/fop/conf/"/>
    <exclude name="plugins/org.dita.pdf2/fop/lib/"/>
    <exclude name="plugins/org.dita.pdf2/lib/icu4j.jar"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <exclude name="lib/saxon/*"/>
    <exclude name="lib/icu4j.jar"/>
    <exclude name="lib/log4j.properties"/>
    <exclude name="start*"/>
    <exclude name="buildPackage.*"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/org.dita.*/**"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <include name="demo/**"/>
    <include name="dtd/**"/>
    <include name="resource/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/dost.jar"/>
    <include name="lib/APACHE-LICENSE-2_0.html"/>
    <include name="lib/resolver.jar"/>
    <include name="lib/CatalogManager.properties"/>
    <include name="lib/**"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.minimum">
    <include name="h2d/**"/>
  </patternset>

  <patternset id="pattern.package.full">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="buildPackage.*"/>
    <exclude name="lib/log4j.properties"/>
    <include name="*.*"/>
    <include name="start*"/>
    <include name="css/**"/>
    <include name="plugins/org.dita.specialization.eclipsemap/**"/>
    <include name="plugins/org.dita.specialization.dita11/**"/>
    <include name="plugins/org.dita.specialization.dita132/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="doc/**"/>
    <include name="demo/**"/>
    <include name="dtd/**"/>
    <include name="plugins/**"/>
    <include name="resource/**"/>
    <include name="samples/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/**"/>
    <patternset refid="pattern.package.ant"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.full">
    <include name="h2d/**"/>
    <include name="legacypdf/**"/>
  </patternset>

  <patternset id="pattern.package.standard">
    <patternset refid="pattern.global.excludes"/>
    <exclude name="plugins/org.dita.pdf2/fop/build/"/>
    <exclude name="plugins/org.dita.pdf2/fop/conf/"/>
    <exclude name="plugins/org.dita.pdf2/fop/lib/"/>
    <exclude name="plugins/org.dita.pdf2/lib/icu4j.jar"/>
    <exclude name="lib/saxon/"/>
    <exclude name="lib/icu4j.jar"/>
    <exclude name="lib/log4j.properties"/>
    <exclude name="start*"/>
    <exclude name="buildPackage.*"/>
    <exclude name="src/**"/>
    <exclude name="plugins/org.dita.pdf2/src/**"/>
    <include name="*.*"/>
    <include name="css/**"/>
    <include name="plugins/org.dita.specialization.eclipsemap/**"/>
    <include name="plugins/org.dita.specialization.dita11/**"/>
    <include name="plugins/org.dita.specialization.dita132/**"/>
    <include name="plugins/org.dita.pdf2/**"/>
    <include name="plugins/com.sophos.tocjs/**"/>
    <include name="doc/**"/>
    <include name="demo/**"/>
    <include name="dtd/**"/>
    <include name="plugins/**"/>
    <include name="resource/**"/>
    <include name="samples/**"/>
    <include name="schema/**"/>
    <include name="xsl/**"/>
    <include name="lib/**"/>
  </patternset>
  <patternset id="pattern.package.ext-plugins.standard">
    <include name="h2d/**"/>
    <include name="legacypdf/**"/>
  </patternset>

  <patternset id="pattern.package.doc">
    <include name="relnotes.html"/>
    <include name="doc/**"/>
    <exclude name="**/*.hhp"/>
    <exclude name="**/*.hhc"/>
    <exclude name="**/*.hhk"/>
    <exclude name="**/*.fo"/>
    <exclude name="**/*.log"/>
    <exclude name="**/*.list"/>
    <exclude name="**/*.temp"/>
    <exclude name="**/*.db"/>
  </patternset>

  <target name="package-binary-minimum">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${version}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.minimum"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.minimum"/>
      </fileset>
    </copy>
    <!-- no documentation -->
    <ant antfile="${temp.dist.dir}/integrator.xml"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <fileset dir="${work.dir}/${param.out.file}"/>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}"/>
    </tar>
  </target>

  <target name="package-binary-standard">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${version}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.standard"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.standard"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
    <ant antfile="${temp.dist.dir}/integrator.xml"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <fileset dir="${work.dir}/${param.out.file}"/>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}"/>
    </tar>
  </target>

  <target name="package-binary-full">
    <fail unless="param.out.file">param.out.file not defined</fail>
    <property name="temp.dist.dir" location="${work.dir}/${param.out.file}/${package.name.root}${version}"/>
    <delete dir="${temp.dist.dir}"/>
    <mkdir dir="${temp.dist.dir}"/>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${src.dir}">
        <patternset refid="pattern.package.full"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}/plugins">
      <fileset dir="${src.dir}/ext-plugins">
        <patternset refid="pattern.package.ext-plugins.full"/>
      </fileset>
    </copy>
    <copy todir="${temp.dist.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
    <ant antfile="${temp.dist.dir}/integrator.xml"/>
    <zip destfile="${package.output.dir}/${param.out.file}${win32.zip.suffix}">
      <zipfileset dir="${work.dir}/${param.out.file}">
        <exclude name="*/startcmd.sh"/>
        <exclude name="*/start"/>
      </zipfileset>
      <zipfileset dir="${work.dir}/${param.out.file}" filemode="755">
        <include name="*/startcmd.sh"/>
        <include name="*/start"/>
      </zipfileset>
    </zip>
    <tar destfile="${package.output.dir}/${param.out.file}${linux.zip.suffix}" compression="gzip" longfile="gnu">
      <tarfileset dir="${work.dir}/${param.out.file}">
        <exclude name="*/startcmd.sh"/>
        <exclude name="*/start"/>
      </tarfileset>
      <tarfileset dir="${work.dir}/${param.out.file}" mode="755">
        <include name="*/startcmd.sh"/>
        <include name="*/start"/>
      </tarfileset>
    </tar>
  </target>

  <target name="build-package-binary" depends="jar, update-doc">
    <sequential>
      <antcall target="package-binary-full">
        <param name="param.out.file" value="${binary-big}"/>
      </antcall>
      <antcall target="package-binary-standard">
        <param name="param.out.file" value="${binary}"/>
      </antcall>
      <antcall target="package-binary-minimum">
        <param name="param.out.file" value="${binary-min}"/>
      </antcall>
    </sequential>
  </target>

  <target name="build-package-binary-with-buildnum" depends="jar, update-doc">
    <buildnumber/>
    <tstamp>
      <format property="build.time" pattern="yyyyMMddhhmm"/>
    </tstamp>
    <sequential>
      <antcall target="package-binary-full">
        <param name="param.out.file" value="${package.name.root}${version}b${build.number}_full_easy_install_bin.${build.time}"/>
      </antcall>
      <antcall target="package-binary-standard">
        <param name="param.out.file" value="${package.name.root}${version}b${build.number}_standard_bin.${build.time}"/>
      </antcall>
      <antcall target="package-binary-minimum">
        <param name="param.out.file" value="${package.name.root}${version}b${build.number}_minimal_bin.${build.time}"/>
      </antcall>
    </sequential>
  </target>

  <target name="dist"
    depends="init-package, build-package-binary, cleanup" description="Build distribution packages"/>

  <target name="cleanup" unless="skip.cleanup">
    <delete dir="${work.dir}"/>
  </target>
  
  <target name="top-level-integration" depends="jar">
    <ant antfile="src/main/integrator.xml"/>
  </target>

  <target name="update-doc" depends="top-level-integration">
    <ant antfile="${src.dir}/integrator.xml" target="integrate" inheritall="false"/>
    <ant antfile="${doc.dir}/build.xml">
      <property name="basedir" value="${src.dir}"/>
      <property name="output.dir" location="${work.dir}/htmlhelp"/>
      <property name="base.temp.dir" location="${work.dir}"/>
      <property name="preprocess.copy-generated-files.skip" value="true"/>
    </ant>
    <!--
    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide-book.ditamap"/>
      <property name="output.dir" location="${doc.out.dir}"/>
      <property name="outputFile.base" value="userguide"/>
      <property name="transtype" value="pdf"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>

    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide.ditamap"/>
      <property name="output.dir" location="${work.dir}/htmlhelp"/>
      <property name="transtype" value="htmlhelp"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <copy todir="${doc.out.dir}" failonerror="no">
      <fileset dir="${work.dir}/htmlhelp">
        <include name="*.chm"/>
      </fileset>
    </copy>

    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/userguide.ditamap"/>
      <property name="output.dir" location="${doc.out.dir}/html"/>
      <property name="outputFile.base" value="index"/>
      <property name="args.csspath" value="css"/>
      <property name="transtype" value="tocjs"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <move file="${doc.out.dir}/html/userguide.html" tofile="${doc.out.dir}/html/index.html"/>
    -->
    <ant antfile="${src.dir}/build.xml">
      <property name="args.input" location="${doc.dir}/readme/changes/rel1.6.xml"/>
      <property name="output.dir" location="${work.dir}/relnotes"/>
      <property name="args.csspath" value="resource"/>
      <property name="transtype" value="xhtml"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <copy file="${work.dir}/relnotes/rel1.6.html" tofile="${out.dir}/relnotes.html"/>

    <delete failonerror="yes" includeemptydirs="true">
      <fileset dir="${doc.out.dir}">
        <include name="**/dita.list"/>
        <include name="**/dita.xml.properties"/>
      </fileset>
    </delete>
  </target>

  <target name="doc" depends="update-doc" description="Build documentation">
    <copy todir="${src.dir}">
      <fileset dir="${out.dir}">
        <patternset refid="pattern.package.doc"/>
      </fileset>
    </copy>
  </target>

  <!-- Test -->

  <property name="test.src.dir" location="${basedir}/src/test"/>
  <property name="test.java.dir" location="${test.src.dir}/java"/>
  <property name="test.lib.dir" location="${test.src.dir}/lib"/>
  <property name="test.bin.dir" location="${basedir}/target/test-classes"/>
  <property name="test.log.dir" location="${test.src.dir}/log"/>
  <property name="test.suite.dir" location="${test.src.dir}/testsuite"/>

  <target name="test-compile" depends="compile">
    <delete failonerror="false">
      <fileset dir="${test.bin.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.bin.dir}"/>
    <javac destdir="${test.bin.dir}"
           debug="on"
           includeantruntime="false"
           source="1.5" target="1.5">
      <src>
        <pathelement location="${test.java.dir}"/>
        <pathelement location="${test.suite.dir}/src/main/java"/>
      </src>
      <classpath>
        <pathelement location="${test.lib.dir}/junit-4.8.2.jar"/>
        <pathelement location="${test.lib.dir}/htmlparser-1.3.1.jar"/>
        <pathelement location="${test.lib.dir}/xmlunit-1.3.jar"/>
        <pathelement location="${bin.dir}"/>
        <pathelement location="${lib.dir}/resolver.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile, test-compile" description="Run unit tests">
    <delete failonerror="false">
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.log.dir}"/>
    <junit printsummary="yes" haltonfailure="yes" showoutput="true">
      <classpath>
        <pathelement location="${test.bin.dir}"/>
        <pathelement location="${test.src.dir}/resources"/>
        <pathelement location="${test.lib.dir}/junit-4.8.2.jar"/>
        <pathelement location="${test.lib.dir}/htmlparser-1.3.1.jar"/>
        <pathelement location="${test.lib.dir}/xmlunit-1.3.jar"/>
        <pathelement location="${bin.dir}"/>
        <pathelement location="${src.dir}/resources"/>
        <pathelement location="${lib.dir}/saxon/saxon9.jar"/>
        <pathelement location="${lib.dir}/saxon/saxon9-dom.jar"/>
        <pathelement location="${lib.dir}/xercesImpl.jar"/>
        <pathelement location="${lib.dir}/xml-apis.jar"/>
        <pathelement location="${lib.dir}/resolver.jar"/>
      </classpath>
      <formatter type="plain"/>
      <batchtest fork="yes" todir="${test.log.dir}">
        <fileset dir="${test.java.dir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <exclude name="org/dita/dost/TestUtils.java"/>
          <exclude name="org/dita/dost/IntegrationTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="integration-test" depends="compile, test-compile" description="Run integration tests">
    <delete failonerror="false">
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
    </delete>
    <mkdir dir="${test.log.dir}"/>
    <junit printsummary="false" haltonfailure="yes" showoutput="false" logfailedtests="true">
      <classpath>
        <pathelement location="${test.bin.dir}"/>
        <pathelement location="${test.src.dir}/resources"/>
        <pathelement location="${test.lib.dir}/junit-4.8.2.jar"/>
        <pathelement location="${test.lib.dir}/htmlparser-1.3.1.jar"/>
        <pathelement location="${test.lib.dir}/xmlunit-1.3.jar"/>
        <pathelement location="${bin.dir}"/>
        <pathelement location="${src.dir}/resources"/>
        <pathelement location="${lib.dir}/saxon/saxon9.jar"/>
        <pathelement location="${lib.dir}/saxon/saxon9-dom.jar"/>
        <pathelement location="${lib.dir}/xercesImpl.jar"/>
        <pathelement location="${lib.dir}/xml-apis.jar"/>
        <pathelement location="${lib.dir}/resolver.jar"/>
      </classpath>
      <sysproperty key="dita.dir" value="${src.dir}"/>
      <sysproperty key="basedir" value="${test.suite.dir}"/>
      <formatter type="plain" usefile="false"/>
      <formatter type="plain" usefile="true"/>
      <test name="org.dita.dost.IntegrationTest" fork="no" todir="${test.log.dir}"/>
    </junit>
  </target>

  <target name="clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${test.bin.dir}" erroronmissingdir="false"/>
      <fileset dir="${test.log.dir}" erroronmissingdir="false"/>
    </delete>
  </target>

  <!-- Site -->

  <condition property="type-class" value="milestone" else="">
    <contains string="${version}" substring="M" casesensitive="true"/>
  </condition>
  <condition property="version-id" value="dev" else="${version}">
    <contains string="${version}" substring="M" casesensitive="true"/>
  </condition>

  <target name="site" description="Build project website">
    <ant antfile="${basedir}/src/main/build.xml">
      <property name="args.input" location="${doc.dir}/sourceforge/sourceforge.ditamap"/>
      <property name="output.dir" location="${basedir}/target/site"/>
      <property name="transtype" value="net.sourceforge.dita-ot.html"/>
      <property name="base.temp.dir" location="${work.dir}"/>
    </ant>
    <ant antfile="${basedir}/src/main/build.xml">
      <property name="args.input" location="${doc.dir}/userguide.ditamap"/>
      <property name="output.dir" location="${basedir}/target/site/${version-id}"/>
      <property name="transtype" value="tocjs"/>
      <property name="args.csspath" value="css"/>
      <property name="base.temp.dir" location="${work.dir}"/>
      <property name="args.hide.parent.link" value="yes"/>
    </ant>
    <!--echoxml file="${basedir}/target/site/${version}/header.html">
      <html>
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
          <title>DITA Open Toolkit ${version} Documentation</title>
          <link rel="stylesheet" type="text/css" href="../css/header.css"/>
        </head>
        <body>
          <h1 class="${type-class}">DITA Open Toolkit ${version} Documentation</h1>
        </body>
      </html>
    </echoxml-->
    <echoxml file="${basedir}/target/site/${version-id}/index.html">
      <html>
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
          <title>DITA Open Toolkit ${version} Documentation</title>
          <link rel="stylesheet" type="text/css" href="commonltr.css"/>
        </head>
        <frameset rows="40,*">
          <frame name="tocwin" src="/header.php?version=${version-id}" scrolling="no" frameborder="0"/>
          <frameset cols="300,*">
            <frame name="tocwin" src="tocnav.html" frameborder="0"/>
            <frame name="contentwin" src="DITA-OTProjectHome.html" frameborder="0"/>
          </frameset>
        </frameset>
      </html>
    </echoxml>
    <!--echo append="true" file="${basedir}/target/site/${version-id}/css/commonltr.css">
      @import url('http://fonts.googleapis.com/css?family=Droid+Sans:regular,bold');
      
      body {
        font-family: 'Droid Sans', Helvetica, Arial, serif;
      }
      h1, h2, h3, h4, h5, h6,
      .relinfo > strong {
        font-family: sans-serif;
      }
      .codeblock {
        background-color: #EEE;
        padding: 5px;
      }
    </echo-->
  </target>


</project>